{
  "address": "0x01e833cf8c115bB859a8E16A72D5ff298F834413",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numColors",
          "type": "uint256"
        }
      ],
      "name": "generateColors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "h",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "l",
              "type": "uint256"
            }
          ],
          "internalType": "struct utils.HSL[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "h",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "l",
              "type": "uint256"
            }
          ],
          "internalType": "struct utils.HSL",
          "name": "_hsl",
          "type": "tuple"
        }
      ],
      "name": "getHslString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hue",
          "type": "uint256"
        }
      ],
      "name": "getHueName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1de21c1902bf223f7aad23e162d0fda22c0d10ec65bd70ab08aa28b0a550ca56",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0x01e833cf8c115bB859a8E16A72D5ff298F834413",
    "transactionIndex": 85,
    "gasUsed": "854060",
    "logsBloom": "0x
    "blockHash": "0xeef67049d2a9deaaaeea1e5b04469d604ef3213e0cd6840aa00e68d81fe9bce8",
    "transactionHash": "0x1de21c1902bf223f7aad23e162d0fda22c0d10ec65bd70ab08aa28b0a550ca56",
    "logs": [],
    "blockNumber": 16382848,
    "cumulativeGasUsed": "10073002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f72e655f9e8bd2c7830102977a65d0cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numColors\",\"type\":\"uint256\"}],\"name\":\"generateColors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"_hsl\",\"type\":\"tuple\"}],\"name\":\"getHslString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hue\",\"type\":\"uint256\"}],\"name\":\"getHueName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Utilities.sol\":\"utils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n  struct HSL {\\n    uint256 h;\\n    uint256 s;\\n    uint256 l;\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(int256 a, int256 b) internal pure returns (int256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (int256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function generateColors(uint256 _hue, uint256 _numColors) public pure returns (HSL[] memory) {\\n    HSL[] memory colors = new HSL[](_numColors);\\n\\n    for (uint256 i = 0; i < _numColors; i++) {\\n      colors[i] = HSL(_hue, 100 - ((i * 50) / _numColors), 70 - ((i * 30) / _numColors));\\n    }\\n\\n    return colors;\\n  }\\n\\n  function getHueName(uint256 _hue) public pure returns (string memory) {\\n    _hue = _hue % 360;\\n\\n    string[12] memory colors = [\\n      \\\"Red\\\",\\n      \\\"Orange\\\",\\n      \\\"Yellow\\\",\\n      \\\"Chartreuse\\\",\\n      \\\"Green\\\",\\n      \\\"Spring green\\\",\\n      \\\"Turquoise\\\",\\n      \\\"Teal\\\",\\n      \\\"Blue\\\",\\n      \\\"Violet\\\",\\n      \\\"Magenta\\\",\\n      \\\"Rose\\\"\\n    ];\\n\\n    uint256 colorIndex = (_hue / 30) % colors.length;\\n    return colors[colorIndex];\\n  }\\n\\n  function getHslString(HSL memory _hsl) public pure returns (string memory) {\\n    return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl.h), \\\",\\\", uint2str(_hsl.s), \\\"%,\\\", uint2str(_hsl.l), \\\"%)\\\"));\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10**_decimals)), \\\".\\\", uint2str(_i_scaled % (10**_decimals)));\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0xffab6acdddf3942242048fbba2d29c606f47bafec6b47c8c5289b2d0f932c8dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610e9b610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80635c1b88f9146100505780636e6472581461008057806375f5696d146100b0575b600080fd5b61006a60048036038101906100659190610743565b6100e0565b6040516100779190610883565b60405180910390f35b61009a6004803603810190610095919061099a565b6101e2565b6040516100a79190610a46565b60405180910390f35b6100ca60048036038101906100c59190610a68565b610233565b6040516100d79190610a46565b60405180910390f35b606060008267ffffffffffffffff8111156100fe576100fd6108bb565b5b60405190808252806020026020018201604052801561013757816020015b6101246106dd565b81526020019060019003908161011c5790505b50905060005b838110156101d7576040518060600160405280868152602001856032846101649190610ac4565b61016e9190610b4d565b606461017a9190610b7e565b815260200185601e8461018d9190610ac4565b6101979190610b4d565b60466101a39190610b7e565b8152508282815181106101b9576101b8610bb2565b5b602002602001018190525080806101cf90610be1565b91505061013d565b508091505092915050565b60606101f18260000151610555565b6101fe8360200151610555565b61020b8460400151610555565b60405160200161021d93929190610d95565b6040516020818303038152906040529050919050565b6060610168826102439190610df2565b915060006040518061018001604052806040518060400160405280600381526020017f526564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f4f72616e6765000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f59656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f436861727472657573650000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f477265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600c81526020017f537072696e6720677265656e000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f54757271756f697365000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f5465616c0000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f426c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f56696f6c6574000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4d6167656e74610000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f526f73650000000000000000000000000000000000000000000000000000000081525081525090506000600c601e856105289190610b4d565b6105329190610df2565b90508181600c811061054757610546610bb2565b5b602002015192505050919050565b60606000820361059c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506106d8565b600082905060005b600082146105ce5780806105b790610be1565b915050600a826105c79190610b4d565b91506105a4565b60008167ffffffffffffffff8111156105ea576105e96108bb565b5b6040519080825280601f01601f19166020018201604052801561061c5781602001600182028036833780820191505090505b50905060008290505b600086146106d05760018161063a9190610b7e565b90506000600a808861064c9190610b4d565b6106569190610ac4565b876106619190610b7e565b603061066d9190610e30565b905060008160f81b90508084848151811061068b5761068a610bb2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886106c79190610b4d565b97505050610625565b819450505050505b919050565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b6000819050919050565b6107208161070d565b811461072b57600080fd5b50565b60008135905061073d81610717565b92915050565b6000806040838503121561075a57610759610708565b5b60006107688582860161072e565b92505060206107798582860161072e565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107b88161070d565b82525050565b6060820160008201516107d460008501826107af565b5060208201516107e760208501826107af565b5060408201516107fa60408501826107af565b50505050565b600061080c83836107be565b60608301905092915050565b6000602082019050919050565b600061083082610783565b61083a818561078e565b93506108458361079f565b8060005b8381101561087657815161085d8882610800565b975061086883610818565b925050600181019050610849565b5085935050505092915050565b6000602082019050818103600083015261089d8184610825565b905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108f3826108aa565b810181811067ffffffffffffffff82111715610912576109116108bb565b5b80604052505050565b60006109256106fe565b905061093182826108ea565b919050565b60006060828403121561094c5761094b6108a5565b5b610956606061091b565b905060006109668482850161072e565b600083015250602061097a8482850161072e565b602083015250604061098e8482850161072e565b60408301525092915050565b6000606082840312156109b0576109af610708565b5b60006109be84828501610936565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a015780820151818401526020810190506109e6565b60008484015250505050565b6000610a18826109c7565b610a2281856109d2565b9350610a328185602086016109e3565b610a3b816108aa565b840191505092915050565b60006020820190508181036000830152610a608184610a0d565b905092915050565b600060208284031215610a7e57610a7d610708565b5b6000610a8c8482850161072e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610acf8261070d565b9150610ada8361070d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b1357610b12610a95565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b588261070d565b9150610b638361070d565b925082610b7357610b72610b1e565b5b828204905092915050565b6000610b898261070d565b9150610b948361070d565b9250828203905081811115610bac57610bab610a95565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610bec8261070d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c1e57610c1d610a95565b5b600182019050919050565b600081905092915050565b7f68736c2800000000000000000000000000000000000000000000000000000000600082015250565b6000610c6a600483610c29565b9150610c7582610c34565b600482019050919050565b6000610c8b826109c7565b610c958185610c29565b9350610ca58185602086016109e3565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b6000610ce7600183610c29565b9150610cf282610cb1565b600182019050919050565b7f252c000000000000000000000000000000000000000000000000000000000000600082015250565b6000610d33600283610c29565b9150610d3e82610cfd565b600282019050919050565b7f2529000000000000000000000000000000000000000000000000000000000000600082015250565b6000610d7f600283610c29565b9150610d8a82610d49565b600282019050919050565b6000610da082610c5d565b9150610dac8286610c80565b9150610db782610cda565b9150610dc38285610c80565b9150610dce82610d26565b9150610dda8284610c80565b9150610de582610d72565b9150819050949350505050565b6000610dfd8261070d565b9150610e088361070d565b925082610e1857610e17610b1e565b5b828206905092915050565b600060ff82169050919050565b6000610e3b82610e23565b9150610e4683610e23565b9250828201905060ff811115610e5f57610e5e610a95565b5b9291505056fea2646970667358221220164bb479dba75dc673500a3681dea379bbbe7b81eb3ea79d79f8fda0f732534364736f6c63430008100033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80635c1b88f9146100505780636e6472581461008057806375f5696d146100b0575b600080fd5b61006a60048036038101906100659190610743565b6100e0565b6040516100779190610883565b60405180910390f35b61009a6004803603810190610095919061099a565b6101e2565b6040516100a79190610a46565b60405180910390f35b6100ca60048036038101906100c59190610a68565b610233565b6040516100d79190610a46565b60405180910390f35b606060008267ffffffffffffffff8111156100fe576100fd6108bb565b5b60405190808252806020026020018201604052801561013757816020015b6101246106dd565b81526020019060019003908161011c5790505b50905060005b838110156101d7576040518060600160405280868152602001856032846101649190610ac4565b61016e9190610b4d565b606461017a9190610b7e565b815260200185601e8461018d9190610ac4565b6101979190610b4d565b60466101a39190610b7e565b8152508282815181106101b9576101b8610bb2565b5b602002602001018190525080806101cf90610be1565b91505061013d565b508091505092915050565b60606101f18260000151610555565b6101fe8360200151610555565b61020b8460400151610555565b60405160200161021d93929190610d95565b6040516020818303038152906040529050919050565b6060610168826102439190610df2565b915060006040518061018001604052806040518060400160405280600381526020017f526564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f4f72616e6765000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f59656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f436861727472657573650000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f477265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600c81526020017f537072696e6720677265656e000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f54757271756f697365000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f5465616c0000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f426c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f56696f6c6574000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4d6167656e74610000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f526f73650000000000000000000000000000000000000000000000000000000081525081525090506000600c601e856105289190610b4d565b6105329190610df2565b90508181600c811061054757610546610bb2565b5b602002015192505050919050565b60606000820361059c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506106d8565b600082905060005b600082146105ce5780806105b790610be1565b915050600a826105c79190610b4d565b91506105a4565b60008167ffffffffffffffff8111156105ea576105e96108bb565b5b6040519080825280601f01601f19166020018201604052801561061c5781602001600182028036833780820191505090505b50905060008290505b600086146106d05760018161063a9190610b7e565b90506000600a808861064c9190610b4d565b6106569190610ac4565b876106619190610b7e565b603061066d9190610e30565b905060008160f81b90508084848151811061068b5761068a610bb2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886106c79190610b4d565b97505050610625565b819450505050505b919050565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b6000819050919050565b6107208161070d565b811461072b57600080fd5b50565b60008135905061073d81610717565b92915050565b6000806040838503121561075a57610759610708565b5b60006107688582860161072e565b92505060206107798582860161072e565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107b88161070d565b82525050565b6060820160008201516107d460008501826107af565b5060208201516107e760208501826107af565b5060408201516107fa60408501826107af565b50505050565b600061080c83836107be565b60608301905092915050565b6000602082019050919050565b600061083082610783565b61083a818561078e565b93506108458361079f565b8060005b8381101561087657815161085d8882610800565b975061086883610818565b925050600181019050610849565b5085935050505092915050565b6000602082019050818103600083015261089d8184610825565b905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108f3826108aa565b810181811067ffffffffffffffff82111715610912576109116108bb565b5b80604052505050565b60006109256106fe565b905061093182826108ea565b919050565b60006060828403121561094c5761094b6108a5565b5b610956606061091b565b905060006109668482850161072e565b600083015250602061097a8482850161072e565b602083015250604061098e8482850161072e565b60408301525092915050565b6000606082840312156109b0576109af610708565b5b60006109be84828501610936565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a015780820151818401526020810190506109e6565b60008484015250505050565b6000610a18826109c7565b610a2281856109d2565b9350610a328185602086016109e3565b610a3b816108aa565b840191505092915050565b60006020820190508181036000830152610a608184610a0d565b905092915050565b600060208284031215610a7e57610a7d610708565b5b6000610a8c8482850161072e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610acf8261070d565b9150610ada8361070d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b1357610b12610a95565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b588261070d565b9150610b638361070d565b925082610b7357610b72610b1e565b5b828204905092915050565b6000610b898261070d565b9150610b948361070d565b9250828203905081811115610bac57610bab610a95565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610bec8261070d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c1e57610c1d610a95565b5b600182019050919050565b600081905092915050565b7f68736c2800000000000000000000000000000000000000000000000000000000600082015250565b6000610c6a600483610c29565b9150610c7582610c34565b600482019050919050565b6000610c8b826109c7565b610c958185610c29565b9350610ca58185602086016109e3565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b6000610ce7600183610c29565b9150610cf282610cb1565b600182019050919050565b7f252c000000000000000000000000000000000000000000000000000000000000600082015250565b6000610d33600283610c29565b9150610d3e82610cfd565b600282019050919050565b7f2529000000000000000000000000000000000000000000000000000000000000600082015250565b6000610d7f600283610c29565b9150610d8a82610d49565b600282019050919050565b6000610da082610c5d565b9150610dac8286610c80565b9150610db782610cda565b9150610dc38285610c80565b9150610dce82610d26565b9150610dda8284610c80565b9150610de582610d72565b9150819050949350505050565b6000610dfd8261070d565b9150610e088361070d565b925082610e1857610e17610b1e565b5b828206905092915050565b600060ff82169050919050565b6000610e3b82610e23565b9150610e4683610e23565b9250828201905060ff811115610e5f57610e5e610a95565b5b9291505056fea2646970667358221220164bb479dba75dc673500a3681dea379bbbe7b81eb3ea79d79f8fda0f732534364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}