{
  "address": "0x7247Bfa7570Da86523B94a10C763c2D69ad08Cfc",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSpecialTrait",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "_kaleidoscope",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "primaryHue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryHue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "primaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "secondaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "backgroundColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "darkerSecondaryHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "primaryColorsHsl",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "secondaryColorsHsl",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Renderer.ColorPalette",
          "name": "_palette",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "circleAtIndexForKaleidescope",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "x1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "x2",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y2",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "radius1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "radius2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alternatingClass",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Renderer.AnimatedCircle",
          "name": "circle",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSpecialTrait",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "_kaleidoscope",
          "type": "tuple"
        }
      ],
      "name": "colorPaletteForKaleidescope",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "primaryHue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryHue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "primaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "secondaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "backgroundColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "darkerSecondaryHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "primaryColorsHsl",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "secondaryColorsHsl",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Renderer.ColorPalette",
          "name": "palette",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "x1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "x2",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y2",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "radius1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "radius2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alternatingClass",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Renderer.AnimatedCircle",
          "name": "_circle",
          "type": "tuple"
        }
      ],
      "name": "getCircleSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSpecialTrait",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "_kaleidoscope",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "primaryHue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryHue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "primaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "secondaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "backgroundColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "darkerSecondaryHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "primaryColorsHsl",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "secondaryColorsHsl",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Renderer.ColorPalette",
          "name": "_palette",
          "type": "tuple"
        }
      ],
      "name": "getKaleidoscopeSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "width",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Renderer.AnimatedRectangle",
          "name": "_rectangle",
          "type": "tuple"
        }
      ],
      "name": "getRectangleSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "kaleidoscopeForTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSpecialTrait",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "kaleidoscope",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSpecialTrait",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSpecialTrait",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "_kaleidoscope",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "primaryHue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryHue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "primaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "secondaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "backgroundColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "darkerSecondaryHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "primaryColorsHsl",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "secondaryColorsHsl",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Renderer.ColorPalette",
          "name": "_palette",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "rectangleAtIndexForKaleidescope",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "width",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Renderer.AnimatedRectangle",
          "name": "rectangle",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x07f7fed9c76f9c512f471a5eb0cbec8d4cce2bf9bb597960467701fc036d93c1",
  "receipt": {
    "to": null,
    "from": "0x4594a187923D9c414e28Dfcc4d0242BEBDaF2301",
    "contractAddress": "0x7247Bfa7570Da86523B94a10C763c2D69ad08Cfc",
    "transactionIndex": 45,
    "gasUsed": "4367649",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3869e5f9f80f9b1553ad702eeade6c05169405831cdba6d49ff6a7afc9bf53d7",
    "transactionHash": "0x07f7fed9c76f9c512f471a5eb0cbec8d4cce2bf9bb597960467701fc036d93c1",
    "logs": [],
    "blockNumber": 8288681,
    "cumulativeGasUsed": "9940616",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "fd0c96fb224398336959f29321ba0b91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSpecialTrait\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"_kaleidoscope\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"primaryHue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryHue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"primaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"secondaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"backgroundColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"darkerSecondaryHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"primaryColorsHsl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"secondaryColorsHsl\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Renderer.ColorPalette\",\"name\":\"_palette\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"circleAtIndexForKaleidescope\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"x2\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y2\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"radius1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"radius2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alternatingClass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Renderer.AnimatedCircle\",\"name\":\"circle\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSpecialTrait\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"_kaleidoscope\",\"type\":\"tuple\"}],\"name\":\"colorPaletteForKaleidescope\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"primaryHue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryHue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"primaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"secondaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"backgroundColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"darkerSecondaryHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"primaryColorsHsl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"secondaryColorsHsl\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Renderer.ColorPalette\",\"name\":\"palette\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"x2\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y2\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"radius1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"radius2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alternatingClass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Renderer.AnimatedCircle\",\"name\":\"_circle\",\"type\":\"tuple\"}],\"name\":\"getCircleSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSpecialTrait\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"_kaleidoscope\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"primaryHue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryHue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"primaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"secondaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"backgroundColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"darkerSecondaryHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"primaryColorsHsl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"secondaryColorsHsl\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Renderer.ColorPalette\",\"name\":\"_palette\",\"type\":\"tuple\"}],\"name\":\"getKaleidoscopeSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Renderer.AnimatedRectangle\",\"name\":\"_rectangle\",\"type\":\"tuple\"}],\"name\":\"getRectangleSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"kaleidoscopeForTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSpecialTrait\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"kaleidoscope\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSpecialTrait\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSpecialTrait\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"_kaleidoscope\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"primaryHue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryHue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"primaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"secondaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"backgroundColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"darkerSecondaryHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"primaryColorsHsl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"secondaryColorsHsl\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Renderer.ColorPalette\",\"name\":\"_palette\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"rectangleAtIndexForKaleidescope\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Renderer.AnimatedRectangle\",\"name\":\"rectangle\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Renderer.sol\":\"Renderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Renderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./Trigonometry.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Renderer {\\n  uint256 constant SIZE = 500;\\n  uint256 constant RADIUS = 200;\\n  uint256 constant PRECISION_DEGREE = 7;\\n  uint256 constant PRECISION = 10**PRECISION_DEGREE;\\n\\n  struct ColorPalette {\\n    uint256 primaryHue;\\n    uint256 secondaryHue;\\n    utils.HSL primaryColorHsl;\\n    utils.HSL secondaryColorHsl;\\n    utils.HSL backgroundColorHsl;\\n    utils.HSL darkerSecondaryHsl;\\n    utils.HSL[] primaryColorsHsl;\\n    utils.HSL[] secondaryColorsHsl;\\n  }\\n\\n  struct Kaleidoscope {\\n    uint256 tokenId;\\n    uint256 repetitions;\\n    uint256 numInsideArtifacts;\\n    uint256 numOutsideArtifacts;\\n    uint256 centerX_precise;\\n    uint256 centerY_precise;\\n    bool hasGradient;\\n    bool hasSecondaryColor;\\n    bool hasSpecialTrait;\\n  }\\n\\n  struct AnimatedCircle {\\n    // Start position\\n    int256 x1;\\n    int256 y1;\\n    // End position\\n    int256 x2;\\n    int256 y2;\\n    uint256 radius1;\\n    uint256 radius2;\\n    uint256 alternatingClass;\\n    uint256 duration;\\n    utils.HSL color;\\n  }\\n\\n  struct AnimatedTriangle {\\n    uint256 x1;\\n    uint256 y1;\\n    uint256 centerX;\\n    uint256 centerY;\\n    uint256 duration;\\n    utils.HSL color;\\n  }\\n\\n  struct AnimatedRectangle {\\n    uint256 width;\\n    uint256 height;\\n    uint256 x;\\n    uint256 y;\\n    uint256 duration;\\n    utils.HSL color;\\n  }\\n\\n  function colorPaletteForKaleidescope(Kaleidoscope memory _kaleidoscope)\\n    public\\n    pure\\n    returns (ColorPalette memory palette)\\n  {\\n    palette.primaryHue = utils.randomRange(_kaleidoscope.tokenId, \\\"primaryHue\\\", 0, 360);\\n    palette.secondaryHue = _kaleidoscope.hasSecondaryColor ? (palette.primaryHue + 240) % 360 : palette.primaryHue;\\n    palette.primaryColorHsl = utils.HSL(palette.primaryHue, 100, 30);\\n    palette.secondaryColorHsl = utils.HSL(palette.secondaryHue, 100, 70);\\n    palette.backgroundColorHsl = utils.HSL(palette.primaryHue, 100, 10);\\n    palette.darkerSecondaryHsl = utils.HSL((palette.primaryHue + 10) % 360, 100, 10);\\n    palette.primaryColorsHsl = utils.generateColors(palette.primaryHue, _kaleidoscope.numInsideArtifacts + 1);\\n    palette.secondaryColorsHsl = utils.generateColors(palette.secondaryHue, _kaleidoscope.numInsideArtifacts + 1);\\n\\n    return palette;\\n  }\\n\\n  function kaleidoscopeForTokenId(uint256 _tokenId) public pure returns (Kaleidoscope memory kaleidoscope) {\\n    kaleidoscope.tokenId = _tokenId;\\n    kaleidoscope.repetitions = utils.randomRange(_tokenId, \\\"repetitions\\\", 3, 20);\\n    kaleidoscope.numInsideArtifacts = utils.randomRange(_tokenId, \\\"numInsideArtifacts\\\", 3, 10);\\n    kaleidoscope.numOutsideArtifacts = utils.randomRange(_tokenId, \\\"numOutsideArtifacts\\\", 1, 4);\\n    kaleidoscope.hasGradient = utils.randomRange(_tokenId, \\\"hasGradient\\\", 1, 10) == 5;\\n    kaleidoscope.hasSecondaryColor = utils.randomRange(_tokenId, \\\"secondaryColor\\\", 1, 8) == 8;\\n\\n    uint256 angle = (((180 - 360 / kaleidoscope.repetitions) / 2) * Trigonometry.PI) / 180;\\n    kaleidoscope.centerX_precise = uint256(\\n      (int256(RADIUS) * Trigonometry.cos(angle)) / int256(10**(18 - PRECISION_DEGREE))\\n    );\\n    kaleidoscope.centerY_precise = uint256(\\n      (int256(RADIUS) * Trigonometry.sin(angle)) / int256(10**(18 - PRECISION_DEGREE))\\n    );\\n\\n    return kaleidoscope;\\n  }\\n\\n  function circleAtIndexForKaleidescope(\\n    Kaleidoscope memory _kaleidoscope,\\n    ColorPalette memory _palette,\\n    uint256 _index\\n  ) public pure returns (AnimatedCircle memory circle) {\\n    uint256 yUpperBound = (_kaleidoscope.centerY_precise / PRECISION) + RADIUS / 8;\\n\\n    circle.y1 = int256(\\n      utils.randomRange(_kaleidoscope.tokenId, string.concat(\\\"y1\\\", utils.uint2str(_index)), 20, yUpperBound)\\n    );\\n    circle.y2 = int256(\\n      utils.randomRange(_kaleidoscope.tokenId, string.concat(\\\"y2\\\", utils.uint2str(_index)), 20, yUpperBound)\\n    );\\n\\n    circle.alternatingClass = utils.randomRange(\\n      _kaleidoscope.tokenId,\\n      string.concat(\\\"alternatingClass\\\", utils.uint2str(_index)),\\n      0,\\n      3\\n    );\\n\\n    if (circle.y1 > circle.y2 && circle.alternatingClass % 2 == 0) {\\n      int256 temp = circle.y1;\\n      circle.y1 = circle.y2;\\n      circle.y2 = temp;\\n    }\\n\\n    int256 gradient_1000 = int256((_kaleidoscope.centerY_precise * 1000) / _kaleidoscope.centerX_precise);\\n\\n    uint256 radiusUB = (_kaleidoscope.centerX_precise / PRECISION) * 2;\\n    circle.radius1 = uint256(\\n      utils.min((radiusUB * (1000 - (uint256(circle.y1) * 1000) / yUpperBound)) / 1000, radiusUB)\\n    );\\n    circle.radius2 = uint256(\\n      utils.min((radiusUB * (1000 - (uint256(circle.y2) * 1000) / yUpperBound)) / 1000, radiusUB)\\n    );\\n\\n    // x1 should be within bounds of triangular path\\n    int256 lb1 = (circle.y1 * 1000) / gradient_1000;\\n    circle.x1 = int256(lb1 - int256(circle.radius1) * 2);\\n\\n    // x2 should be within bounds of triangular path\\n    int256 lb2 = (circle.y2 * 1000) / gradient_1000;\\n    circle.x2 = int256(2 * int256(_kaleidoscope.centerX_precise / PRECISION) - lb2 + int256(circle.radius2) * 2);\\n\\n    circle.duration = utils.randomRange(_kaleidoscope.tokenId, string.concat(\\\"duration\\\", utils.uint2str(_index)), 3, 7);\\n\\n    circle.color = _index % 2 == 0 ? _palette.primaryColorsHsl[_index + 1] : _palette.secondaryColorsHsl[_index + 1];\\n\\n    return circle;\\n  }\\n\\n  function rectangleAtIndexForKaleidescope(\\n    Kaleidoscope memory _kaleidoscope,\\n    ColorPalette memory _palette,\\n    uint256 _index\\n  ) public pure returns (AnimatedRectangle memory rectangle) {\\n    rectangle.width = utils.randomRange(\\n      _kaleidoscope.tokenId,\\n      string.concat(\\\"rectwidth\\\", utils.uint2str(_index)),\\n      (_kaleidoscope.centerY_precise / PRECISION) / 2,\\n      (_kaleidoscope.centerY_precise / PRECISION)\\n    );\\n    rectangle.height = utils.randomRange(\\n      _kaleidoscope.tokenId,\\n      string.concat(\\\"rectheight\\\", utils.uint2str(_index)),\\n      (_kaleidoscope.centerY_precise / PRECISION),\\n      _kaleidoscope.centerY_precise * 2 + RADIUS / 8\\n    );\\n    rectangle.x = 0;\\n    rectangle.y = _kaleidoscope.centerY_precise / PRECISION;\\n    rectangle.duration = utils.randomRange(\\n      _kaleidoscope.tokenId,\\n      string.concat(\\\"rectduration\\\", utils.uint2str(_index)),\\n      5,\\n      10\\n    );\\n    rectangle.color = _index % 2 == 0 ? _palette.primaryColorsHsl[0] : _palette.secondaryColorsHsl[0];\\n\\n    return rectangle;\\n  }\\n\\n  function getCircleSVG(AnimatedCircle memory _circle) public pure returns (string memory) {\\n    string memory animations = string.concat(\\n      '<animate attributeName=\\\"r\\\" values=\\\"',\\n      utils.uint2str(_circle.radius1),\\n      \\\";\\\",\\n      utils.uint2str(_circle.radius2),\\n      \\\";\\\",\\n      utils.uint2str(_circle.radius1),\\n      \\\";\\\",\\n      utils.uint2str(_circle.radius2),\\n      '\\\" calcMode=\\\"linear\\\" dur=\\\"',\\n      utils.uint2str(_circle.duration * 2),\\n      's\\\" repeatCount=\\\"indefinite\\\"/>'\\n    );\\n\\n    animations = string.concat(\\n      animations,\\n      '<animate attributeName=\\\"cy\\\" values=\\\"',\\n      utils.int2str(_circle.y1),\\n      \\\";\\\",\\n      utils.int2str(_circle.y2),\\n      \\\";\\\",\\n      utils.int2str(_circle.y1),\\n      \\\";\\\",\\n      utils.int2str(_circle.y2),\\n      '\\\" calcMode=\\\"linear\\\" dur=\\\"',\\n      utils.uint2str(_circle.duration * 2),\\n      's\\\" repeatCount=\\\"indefinite\\\"/>'\\n    );\\n\\n    animations = string.concat(\\n      animations,\\n      '<animate attributeName=\\\"cx\\\" values=\\\"',\\n      utils.int2str(_circle.x1),\\n      \\\";\\\",\\n      utils.int2str(_circle.x2),\\n      \\\";\\\",\\n      utils.int2str(_circle.x1),\\n      \\\";\\\",\\n      utils.int2str(_circle.x2),\\n      '\\\" calcMode=\\\"linear\\\" dur=\\\"',\\n      utils.uint2str(_circle.duration * 2),\\n      's\\\" repeatCount=\\\"indefinite\\\"/>'\\n    );\\n\\n    return\\n      string.concat(\\n        '<circle cx=\\\"',\\n        utils.int2str((_circle.x1 + _circle.x2) / 2),\\n        '\\\" cy=\\\"',\\n        utils.int2str((_circle.y1 + _circle.y2) / 2),\\n        '\\\" r=\\\"',\\n        utils.uint2str((_circle.radius1 + _circle.radius2) / 2),\\n        '\\\" fill=\\\"',\\n        utils.getHslString(_circle.color),\\n        '\\\">',\\n        animations,\\n        \\\"</circle>\\\"\\n      );\\n  }\\n\\n  function getRectangleSVG(AnimatedRectangle memory _rectangle) public pure returns (string memory) {\\n    string memory animations = string.concat(\\n      '<animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 0 -',\\n      utils.uint2str(_rectangle.y),\\n      '\\\" to=\\\"-360 0 -',\\n      utils.uint2str(_rectangle.y),\\n      '\\\" begin=\\\"0s\\\" dur=\\\"',\\n      utils.uint2str(_rectangle.duration),\\n      's\\\" repeatCount=\\\"indefinite\\\" />'\\n    );\\n\\n    return\\n      string.concat(\\n        '<rect rx=\\\"3\\\" ry=\\\"3\\\" x=\\\"0\\\" y=\\\"-',\\n        utils.uint2str(_rectangle.y),\\n        '\\\" width=\\\"',\\n        utils.uint2str(_rectangle.width),\\n        '\\\" height=\\\"',\\n        utils.uint2str(_rectangle.height),\\n        '\\\" fill=\\\"',\\n        utils.getHslString(_rectangle.color),\\n        '\\\">',\\n        animations,\\n        \\\"</rect>\\\"\\n      );\\n  }\\n\\n  function linearGradient(string memory _stop1Color, string memory _stop2Color) internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<linearGradient id=\\\"gradient\\\">',\\n        '<stop offset=\\\"0%\\\" stop-color=\\\"',\\n        _stop1Color,\\n        '\\\"/>',\\n        '<stop offset=\\\"100%\\\" stop-color=\\\"',\\n        _stop2Color,\\n        '\\\"/>',\\n        \\\"</linearGradient>\\\"\\n      );\\n  }\\n\\n  function getKaleidoscopeSVG(Kaleidoscope memory _kaleidoscope, ColorPalette memory _palette)\\n    public\\n    pure\\n    returns (string memory)\\n  {\\n    // Get outer artifacts\\n    string memory outerArtifacts = \\\"\\\";\\n    for (uint256 i = 0; i < _kaleidoscope.numOutsideArtifacts; i++) {\\n      // Rectangle\\n      AnimatedRectangle memory rectangle = rectangleAtIndexForKaleidescope(_kaleidoscope, _palette, i);\\n      outerArtifacts = string.concat(outerArtifacts, getRectangleSVG(rectangle));\\n    }\\n\\n    string memory innerArtifacts = \\\"\\\";\\n    for (uint256 i = 0; i < _kaleidoscope.numInsideArtifacts; i++) {\\n      AnimatedCircle memory circle = circleAtIndexForKaleidescope(_kaleidoscope, _palette, i);\\n      innerArtifacts = string.concat(innerArtifacts, getCircleSVG(circle));\\n    }\\n\\n    string memory paths = \\\"\\\";\\n    uint256 angleInterval = (360 * 10**7) / _kaleidoscope.repetitions;\\n    for (uint256 i = 0; i < _kaleidoscope.repetitions; i++) {\\n      paths = string.concat(\\n        paths,\\n        '<use href=\\\"#tile\\\" transform=\\\"rotate(',\\n        utils.uint2floatstr(angleInterval * i, PRECISION_DEGREE),\\n        \\\",\\\",\\n        utils.uint2floatstr(_kaleidoscope.centerX_precise, PRECISION_DEGREE),\\n        \\\",\\\",\\n        utils.uint2floatstr(_kaleidoscope.centerY_precise, PRECISION_DEGREE),\\n        ')\\\" />'\\n      );\\n    }\\n\\n    string memory clipPath = string.concat(\\n      '<clipPath id=\\\"clip\\\">',\\n      '<path d=\\\"M0,0L',\\n      utils.uint2floatstr(_kaleidoscope.centerX_precise, PRECISION_DEGREE),\\n      \\\",\\\",\\n      utils.uint2floatstr(_kaleidoscope.centerY_precise, PRECISION_DEGREE),\\n      \\\"L\\\",\\n      utils.uint2floatstr(_kaleidoscope.centerX_precise * 2, PRECISION_DEGREE),\\n      \\\",0A\\\",\\n      utils.uint2str(RADIUS),\\n      \\\",\\\",\\n      utils.uint2str(RADIUS),\\n      ',0,0,0,0,0Z\\\" />',\\n      \\\"</clipPath>\\\"\\n    );\\n\\n    string memory svg = string.concat(\\n      '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 ',\\n      utils.uint2str(SIZE),\\n      \\\" \\\",\\n      utils.uint2str(SIZE),\\n      '\\\" width=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\"><defs>',\\n      linearGradient(utils.getHslString(_palette.primaryColorHsl), utils.getHslString(_palette.darkerSecondaryHsl)),\\n      clipPath,\\n      '<g id=\\\"tile\\\" clip-path=\\\"url(#clip)\\\">',\\n      '<rect x=\\\"0\\\" y=\\\"-',\\n      utils.uint2str(RADIUS),\\n      '\\\" width=\\\"',\\n      utils.uint2str(RADIUS * 2),\\n      '\\\" height=\\\"',\\n      utils.uint2str(RADIUS * 2),\\n      '\\\" fill=\\\"'\\n    );\\n\\n    svg = string.concat(\\n      svg,\\n      _kaleidoscope.hasGradient ? \\\"url(#gradient)\\\" : utils.getHslString(_palette.primaryColorHsl),\\n      '\\\"></rect>',\\n      outerArtifacts,\\n      innerArtifacts,\\n      \\\"</g>\\\"\\n    );\\n\\n    svg = string.concat(\\n      svg,\\n      \\\"</defs>\\\",\\n      '<rect width=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" fill=\\\"',\\n      utils.getHslString(_palette.backgroundColorHsl),\\n      '\\\"></rect>',\\n      '<g id=\\\"kaleidoscopeTile\\\" transform=\\\"translate(',\\n      utils.uint2str(SIZE / 2 - _kaleidoscope.centerX_precise / PRECISION)\\n      // \\\"0\\\"\\n    );\\n\\n    string memory backgroundCircleBase = string.concat(\\n      '<circle cx=\\\"',\\n      utils.uint2floatstr(_kaleidoscope.centerX_precise, PRECISION_DEGREE),\\n      '\\\" cy=\\\"',\\n      utils.uint2floatstr(_kaleidoscope.centerY_precise, PRECISION_DEGREE),\\n      '\\\" r=\\\"'\\n    );\\n\\n    string memory specialTrait = string.concat(\\n      backgroundCircleBase,\\n      utils.uint2str(RADIUS + 8),\\n      '\\\" fill=\\\"none\\\"',\\n      _kaleidoscope.hasSpecialTrait ? ' stroke=\\\"#EBA947\\\" stroke-width=\\\"4\\\"' : \\\"\\\",\\n      \\\"/>\\\"\\n    );\\n\\n    svg = string.concat(\\n      svg,\\n      \\\",\\\",\\n      utils.uint2str(SIZE / 2 - _kaleidoscope.centerY_precise / PRECISION),\\n      // \\\"0\\\",\\n      ')\\\">',\\n      backgroundCircleBase,\\n      utils.uint2str(RADIUS),\\n      '\\\" fill=\\\"',\\n      utils.getHslString(_palette.primaryColorHsl),\\n      '\\\" />',\\n      _kaleidoscope.hasSpecialTrait ? specialTrait : \\\"\\\"\\n    );\\n\\n    svg = string.concat(svg, paths, \\\"</g>\\\", \\\"</svg>\\\");\\n\\n    return svg;\\n  }\\n\\n  function render(uint256 _tokenId) public pure returns (string memory) {\\n    Kaleidoscope memory kaleidoscope = kaleidoscopeForTokenId(_tokenId);\\n    kaleidoscope.hasSpecialTrait = true;\\n    ColorPalette memory palette = colorPaletteForKaleidescope(kaleidoscope);\\n    string memory svg = getKaleidoscopeSVG(kaleidoscope, palette);\\n\\n    return svg;\\n  }\\n\\n  function metadata(uint256 _tokenId) public pure returns (Kaleidoscope memory) {\\n    Kaleidoscope memory kaleidoscope = kaleidoscopeForTokenId(_tokenId);\\n    return kaleidoscope;\\n  }\\n}\\n\",\"keccak256\":\"0x0ce34ae7767c744089f02c2c0c0f0a760c69cb48ed876340279a98add00a183f\",\"license\":\"MIT\"},\"contracts/Trigonometry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/**\\n * @notice Solidity library offering basic trigonometry functions where inputs and outputs are\\n * integers. Inputs are specified in radians scaled by 1e18, and similarly outputs are scaled by 1e18.\\n *\\n * This implementation is based off the Solidity trigonometry library written by Lefteris Karapetsas\\n * which can be found here: https://github.com/Sikorkaio/sikorka/blob/e75c91925c914beaedf4841c0336a806f2b5f66d/contracts/trigonometry.sol\\n *\\n * Compared to Lefteris' implementation, this version makes the following changes:\\n *   - Uses a 32 bits instead of 16 bits for improved accuracy\\n *   - Updated for Solidity 0.8.x\\n *   - Various gas optimizations\\n *   - Change inputs/outputs to standard trig format (scaled by 1e18) instead of requiring the\\n *     integer format used by the algorithm\\n *\\n * Lefertis' implementation is based off Dave Dribin's trigint C library\\n *     http://www.dribin.org/dave/trigint/\\n *\\n * Which in turn is based from a now deleted article which can be found in the Wayback Machine:\\n *     http://web.archive.org/web/20120301144605/http://www.dattalo.com/technical/software/pic/picsine.html\\n */\\nlibrary Trigonometry {\\n  // Table index into the trigonometric table\\n  uint256 constant INDEX_WIDTH = 8;\\n  // Interpolation between successive entries in the table\\n  uint256 constant INTERP_WIDTH = 16;\\n  uint256 constant INDEX_OFFSET = 28 - INDEX_WIDTH;\\n  uint256 constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\n  uint32 constant ANGLES_IN_CYCLE = 1073741824;\\n  uint32 constant QUADRANT_HIGH_MASK = 536870912;\\n  uint32 constant QUADRANT_LOW_MASK = 268435456;\\n  uint256 constant SINE_TABLE_SIZE = 256;\\n\\n  // Pi as an 18 decimal value, which is plenty of accuracy: \\\"For JPL's highest accuracy calculations, which are for\\n  // interplanetary navigation, we use 3.141592653589793: https://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/\\n  uint256 constant PI = 3141592653589793238;\\n  uint256 constant TWO_PI = 2 * PI;\\n  uint256 constant PI_OVER_TWO = PI / 2;\\n\\n  // The constant sine lookup table was generated by generate_trigonometry.py. We must use a constant\\n  // bytes array because constant arrays are not supported in Solidity. Each entry in the lookup\\n  // table is 4 bytes. Since we're using 32-bit parameters for the lookup table, we get a table size\\n  // of 2^(32/4) + 1 = 257, where the first and last entries are equivalent (hence the table size of\\n  // 256 defined above)\\n  uint8 constant entry_bytes = 4; // each entry in the lookup table is 4 bytes\\n  uint256 constant entry_mask = ((1 << (8 * entry_bytes)) - 1); // mask used to cast bytes32 -> lookup table entry\\n  bytes constant sin_table =\\n    hex\\\"00_00_00_00_00_c9_0f_88_01_92_1d_20_02_5b_26_d7_03_24_2a_bf_03_ed_26_e6_04_b6_19_5d_05_7f_00_35_06_47_d9_7c_07_10_a3_45_07_d9_5b_9e_08_a2_00_9a_09_6a_90_49_0a_33_08_bc_0a_fb_68_05_0b_c3_ac_35_0c_8b_d3_5e_0d_53_db_92_0e_1b_c2_e4_0e_e3_87_66_0f_ab_27_2b_10_72_a0_48_11_39_f0_cf_12_01_16_d5_12_c8_10_6e_13_8e_db_b1_14_55_76_b1_15_1b_df_85_15_e2_14_44_16_a8_13_05_17_6d_d9_de_18_33_66_e8_18_f8_b8_3c_19_bd_cb_f3_1a_82_a0_25_1b_47_32_ef_1c_0b_82_6a_1c_cf_8c_b3_1d_93_4f_e5_1e_56_ca_1e_1f_19_f9_7b_1f_dc_dc_1b_20_9f_70_1c_21_61_b3_9f_22_23_a4_c5_22_e5_41_af_23_a6_88_7e_24_67_77_57_25_28_0c_5d_25_e8_45_b6_26_a8_21_85_27_67_9d_f4_28_26_b9_28_28_e5_71_4a_29_a3_c4_85_2a_61_b1_01_2b_1f_34_eb_2b_dc_4e_6f_2c_98_fb_ba_2d_55_3a_fb_2e_11_0a_62_2e_cc_68_1e_2f_87_52_62_30_41_c7_60_30_fb_c5_4d_31_b5_4a_5d_32_6e_54_c7_33_26_e2_c2_33_de_f2_87_34_96_82_4f_35_4d_90_56_36_04_1a_d9_36_ba_20_13_37_6f_9e_46_38_24_93_b0_38_d8_fe_93_39_8c_dd_32_3a_40_2d_d1_3a_f2_ee_b7_3b_a5_1e_29_3c_56_ba_70_3d_07_c1_d5_3d_b8_32_a5_3e_68_0b_2c_3f_17_49_b7_3f_c5_ec_97_40_73_f2_1d_41_21_58_9a_41_ce_1e_64_42_7a_41_d0_43_25_c1_35_43_d0_9a_ec_44_7a_cd_50_45_24_56_bc_45_cd_35_8f_46_75_68_27_47_1c_ec_e6_47_c3_c2_2e_48_69_e6_64_49_0f_57_ee_49_b4_15_33_4a_58_1c_9d_4a_fb_6c_97_4b_9e_03_8f_4c_3f_df_f3_4c_e1_00_34_4d_81_62_c3_4e_21_06_17_4e_bf_e8_a4_4f_5e_08_e2_4f_fb_65_4c_50_97_fc_5e_51_33_cc_94_51_ce_d4_6e_52_69_12_6e_53_02_85_17_53_9b_2a_ef_54_33_02_7d_54_ca_0a_4a_55_60_40_e2_55_f5_a4_d2_56_8a_34_a9_57_1d_ee_f9_57_b0_d2_55_58_42_dd_54_58_d4_0e_8c_59_64_64_97_59_f3_de_12_5a_82_79_99_5b_10_35_ce_5b_9d_11_53_5c_29_0a_cc_5c_b4_20_df_5d_3e_52_36_5d_c7_9d_7b_5e_50_01_5d_5e_d7_7c_89_5f_5e_0d_b2_5f_e3_b3_8d_60_68_6c_ce_60_ec_38_2f_61_6f_14_6b_61_f1_00_3e_62_71_fa_68_62_f2_01_ac_63_71_14_cc_63_ef_32_8f_64_6c_59_bf_64_e8_89_25_65_63_bf_91_65_dd_fb_d2_66_57_3c_bb_66_cf_81_1f_67_46_c7_d7_67_bd_0f_bc_68_32_57_aa_68_a6_9e_80_69_19_e3_1f_69_8c_24_6b_69_fd_61_4a_6a_6d_98_a3_6a_dc_c9_64_6b_4a_f2_78_6b_b8_12_d0_6c_24_29_5f_6c_8f_35_1b_6c_f9_34_fb_6d_62_27_f9_6d_ca_0d_14_6e_30_e3_49_6e_96_a9_9c_6e_fb_5f_11_6f_5f_02_b1_6f_c1_93_84_70_23_10_99_70_83_78_fe_70_e2_cb_c5_71_41_08_04_71_9e_2c_d1_71_fa_39_48_72_55_2c_84_72_af_05_a6_73_07_c3_cf_73_5f_66_25_73_b5_eb_d0_74_0b_53_fa_74_5f_9d_d0_74_b2_c8_83_75_04_d3_44_75_55_bd_4b_75_a5_85_ce_75_f4_2c_0a_76_41_af_3c_76_8e_0e_a5_76_d9_49_88_77_23_5f_2c_77_6c_4e_da_77_b4_17_df_77_fa_b9_88_78_40_33_28_78_84_84_13_78_c7_ab_a1_79_09_a9_2c_79_4a_7c_11_79_8a_23_b0_79_c8_9f_6d_7a_05_ee_ac_7a_42_10_d8_7a_7d_05_5a_7a_b6_cb_a3_7a_ef_63_23_7b_26_cb_4e_7b_5d_03_9d_7b_92_0b_88_7b_c5_e2_8f_7b_f8_88_2f_7c_29_fb_ed_7c_5a_3d_4f_7c_89_4b_dd_7c_b7_27_23_7c_e3_ce_b1_7d_0f_42_17_7d_39_80_eb_7d_62_8a_c5_7d_8a_5f_3f_7d_b0_fd_f7_7d_d6_66_8e_7d_fa_98_a7_7e_1d_93_e9_7e_3f_57_fe_7e_5f_e4_92_7e_7f_39_56_7e_9d_55_fb_7e_ba_3a_38_7e_d5_e5_c5_7e_f0_58_5f_7f_09_91_c3_7f_21_91_b3_7f_38_57_f5_7f_4d_e4_50_7f_62_36_8e_7f_75_4e_7f_7f_87_2b_f2_7f_97_ce_bc_7f_a7_36_b3_7f_b5_63_b2_7f_c2_55_95_7f_ce_0c_3d_7f_d8_87_8d_7f_e1_c7_6a_7f_e9_cb_bf_7f_f0_94_77_7f_f6_21_81_7f_fa_72_d0_7f_fd_88_59_7f_ff_62_15_7f_ff_ff_ff\\\";\\n\\n  /**\\n   * @notice Return the sine of a value, specified in radians scaled by 1e18\\n   * @dev This algorithm for converting sine only uses integer values, and it works by dividing the\\n   * circle into 30 bit angles, i.e. there are 1,073,741,824 (2^30) angle units, instead of the\\n   * standard 360 degrees (2pi radians). From there, we get an output in range -2,147,483,647 to\\n   * 2,147,483,647, (which is the max value of an int32) which is then converted back to the standard\\n   * range of -1 to 1, again scaled by 1e18\\n   * @param _angle Angle to convert\\n   * @return Result scaled by 1e18\\n   */\\n  function sin(uint256 _angle) internal pure returns (int256) {\\n    unchecked {\\n      // Convert angle from from arbitrary radian value (range of 0 to 2pi) to the algorithm's range\\n      // of 0 to 1,073,741,824\\n      _angle = (ANGLES_IN_CYCLE * (_angle % TWO_PI)) / TWO_PI;\\n\\n      // Apply a mask on an integer to extract a certain number of bits, where angle is the integer\\n      // whose bits we want to get, the width is the width of the bits (in bits) we want to extract,\\n      // and the offset is the offset of the bits (in bits) we want to extract. The result is an\\n      // integer containing _width bits of _value starting at the offset bit\\n      uint256 interp = (_angle >> INTERP_OFFSET) & ((1 << INTERP_WIDTH) - 1);\\n      uint256 index = (_angle >> INDEX_OFFSET) & ((1 << INDEX_WIDTH) - 1);\\n\\n      // The lookup table only contains data for one quadrant (since sin is symmetric around both\\n      // axes), so here we figure out which quadrant we're in, then we lookup the values in the\\n      // table then modify values accordingly\\n      bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\n      bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\n\\n      if (!is_odd_quadrant) {\\n        index = SINE_TABLE_SIZE - 1 - index;\\n      }\\n\\n      bytes memory table = sin_table;\\n      // We are looking for two consecutive indices in our lookup table\\n      // Since EVM is left aligned, to read n bytes of data from idx i, we must read from `i * data_len` + `n`\\n      // therefore, to read two entries of size entry_bytes `index * entry_bytes` + `entry_bytes * 2`\\n      uint256 offset1_2 = (index + 2) * entry_bytes;\\n\\n      // This following snippet will function for any entry_bytes <= 15\\n      uint256 x1_2;\\n      assembly {\\n        // mload will grab one word worth of bytes (32), as that is the minimum size in EVM\\n        x1_2 := mload(add(table, offset1_2))\\n      }\\n\\n      // We now read the last two numbers of size entry_bytes from x1_2\\n      // in example: entry_bytes = 4; x1_2 = 0x00...12345678abcdefgh\\n      // therefore: entry_mask = 0xFFFFFFFF\\n\\n      // 0x00...12345678abcdefgh >> 8*4 = 0x00...12345678\\n      // 0x00...12345678 & 0xFFFFFFFF = 0x12345678\\n      uint256 x1 = (x1_2 >> (8 * entry_bytes)) & entry_mask;\\n      // 0x00...12345678abcdefgh & 0xFFFFFFFF = 0xabcdefgh\\n      uint256 x2 = x1_2 & entry_mask;\\n\\n      // Approximate angle by interpolating in the table, accounting for the quadrant\\n      uint256 approximation = ((x2 - x1) * interp) >> INTERP_WIDTH;\\n      int256 sine = is_odd_quadrant ? int256(x1) + int256(approximation) : int256(x2) - int256(approximation);\\n      if (is_negative_quadrant) {\\n        sine *= -1;\\n      }\\n\\n      // Bring result from the range of -2,147,483,647 through 2,147,483,647 to -1e18 through 1e18.\\n      // This can never overflow because sine is bounded by the above values\\n      return (sine * 1e18) / 2_147_483_647;\\n    }\\n  }\\n\\n  /**\\n   * @notice Return the cosine of a value, specified in radians scaled by 1e18\\n   * @dev This is identical to the sin() method, and just computes the value by delegating to the\\n   * sin() method using the identity cos(x) = sin(x + pi/2)\\n   * @dev Overflow when `angle + PI_OVER_TWO > type(uint256).max` is ok, results are still accurate\\n   * @param _angle Angle to convert\\n   * @return Result scaled by 1e18\\n   */\\n  function cos(uint256 _angle) internal pure returns (int256) {\\n    unchecked {\\n      return sin(_angle + PI_OVER_TWO);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6efee204682c447c9b90e2acf39b6e28286c8e64db156aa1d5d51965eeac248b\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n  struct HSL {\\n    uint256 h;\\n    uint256 s;\\n    uint256 l;\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(int256 a, int256 b) internal pure returns (int256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (int256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function generateColors(uint256 _hue, uint256 _numColors) public pure returns (HSL[] memory) {\\n    HSL[] memory colors = new HSL[](_numColors);\\n\\n    for (uint256 i = 0; i < _numColors; i++) {\\n      colors[i] = HSL(_hue, 100 - ((i * 50) / _numColors), 70 - ((i * 30) / _numColors));\\n    }\\n\\n    return colors;\\n  }\\n\\n  function getHueName(uint256 _hue) public pure returns (string memory) {\\n    _hue = _hue % 360;\\n\\n    string[12] memory colors = [\\n      \\\"Red\\\",\\n      \\\"Orange\\\",\\n      \\\"Yellow\\\",\\n      \\\"Chartreuse\\\",\\n      \\\"Green\\\",\\n      \\\"Spring green\\\",\\n      \\\"Turquoise\\\",\\n      \\\"Teal\\\",\\n      \\\"Blue\\\",\\n      \\\"Violet\\\",\\n      \\\"Magenta\\\",\\n      \\\"Rose\\\"\\n    ];\\n\\n    uint256 colorIndex = (_hue / 30) % colors.length;\\n    return colors[colorIndex];\\n  }\\n\\n  function getHslString(HSL memory _hsl) public pure returns (string memory) {\\n    return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl.h), \\\",\\\", uint2str(_hsl.s), \\\"%,\\\", uint2str(_hsl.l), \\\"%)\\\"));\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10**_decimals)), \\\".\\\", uint2str(_i_scaled % (10**_decimals)));\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0xffab6acdddf3942242048fbba2d29c606f47bafec6b47c8c5289b2d0f932c8dd\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063aa9e7e7511610066578063aa9e7e7514610158578063b3c34a5014610188578063c321118c146101b8578063d6cf5f55146101e8578063e3684e391461021857610093565b80631ac48ab1146100985780637d11e69c146100c85780638a0e9ad7146100f857806391b078a414610128575b600080fd5b6100b260048036038101906100ad9190612141565b610248565b6040516100bf91906121ee565b60405180910390f35b6100e260048036038101906100dd91906124fb565b6104cc565b6040516100ef91906121ee565b60405180910390f35b610112600480360381019061010d9190612559565b610c4e565b60405161011f9190612698565b60405180910390f35b610142600480360381019061013d91906126b4565b610e3a565b60405161014f919061284c565b60405180910390f35b610172600480360381019061016d919061290f565b6110c6565b60405161017f91906121ee565b60405180910390f35b6101a2600480360381019061019d9190612559565b6111e8565b6040516101af9190612a03565b60405180910390f35b6101d260048036038101906101cd9190612a1f565b6115bc565b6040516101df91906121ee565b60405180910390f35b61020260048036038101906101fd9190612a1f565b611603565b60405161020f9190612b12565b60405180910390f35b610232600480360381019061022d9190612a1f565b61187a565b60405161023f9190612b12565b60405180910390f35b606060006102598360800151611898565b6102668460a00151611898565b6102738560800151611898565b6102808660a00151611898565b61029960028860e001516102949190612b5d565b611898565b6040516020016102ad959493929190612cd7565b6040516020818303038152906040529050806102cc8460200151611a20565b6102d98560600151611a20565b6102e68660200151611a20565b6102f38760600151611a20565b61030c60028960e001516103079190612b5d565b611898565b60405160200161032196959493929190612dea565b6040516020818303038152906040529050806103408460000151611a20565b61034d8560400151611a20565b61035a8660000151611a20565b6103678760400151611a20565b61038060028960e0015161037b9190612b5d565b611898565b60405160200161039596959493929190612f0a565b60405160208183030381529060405290506103ce6002846040015185600001516103bf9190612fb8565b6103c9919061302b565b611a20565b6103f66002856060015186602001516103e79190612fb8565b6103f1919061302b565b611a20565b61041e60028660a00151876080015161040f9190613095565b61041991906130c9565b611898565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588761010001516040518263ffffffff1660e01b815260040161045a919061314b565b600060405180830381865af4158015610477573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104a0919061320c565b846040516020016104b5959493929190613339565b604051602081830303815290604052915050919050565b6060600060405180602001604052806000815250905060005b84606001518110156105405760006104fe868684610c4e565b90508261050a826110c6565b60405160200161051b9291906133de565b604051602081830303815290604052925050808061053890613402565b9150506104e5565b50600060405180602001604052806000815250905060005b85604001518110156105b35760006105718787846111e8565b90508261057d82610248565b60405160200161058e9291906133de565b60405160208183030381529060405292505080806105ab90613402565b915050610558565b5060006040518060200160405280600081525090506000866020015163d693a4006105de91906130c9565b905060005b876020015181101561065b578261060682846105ff9190612b5d565b6007611a74565b6106158a608001516007611a74565b6106248b60a001516007611a74565b6040516020016106379493929190613508565b6040516020818303038152906040529250808061065390613402565b9150506105e3565b50600061066d88608001516007611a74565b61067c8960a001516007611a74565b61069760028b608001516106909190612b5d565b6007611a74565b6106a160c8611898565b6106ab60c8611898565b6040516020016106bf959493929190613662565b604051602081830303815290604052905060006106dd6101f4611898565b6106e86101f4611898565b6106f36101f4611898565b6106fe6101f4611898565b61080873__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588e604001516040518263ffffffff1660e01b815260040161073c919061314b565b600060405180830381865af4158015610759573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610782919061320c565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588f60a001516040518263ffffffff1660e01b81526004016107bd919061314b565b600060405180830381865af41580156107da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610803919061320c565b611ade565b8661081360c8611898565b610829600260c86108249190612b5d565b611898565b61083f600260c861083a9190612b5d565b611898565b604051602001610857999897969594939291906138c7565b6040516020818303038152906040529050808960c001516108f85773__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588a604001516040518263ffffffff1660e01b81526004016108ad919061314b565b600060405180830381865af41580156108ca573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108f3919061320c565b61092f565b6040518060400160405280600e81526020017f75726c28236772616469656e74290000000000000000000000000000000000008152505b87876040516020016109449493929190613a20565b6040516020818303038152906040529050806109616101f4611898565b61096c6101f4611898565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588c608001516040518263ffffffff1660e01b81526004016109a7919061314b565b600060405180830381865af41580156109c4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109ed919061320c565b610a2b6007600a6109fe9190613baf565b8e60800151610a0d91906130c9565b60026101f4610a1c91906130c9565b610a269190613bfa565b611898565b604051602001610a3f959493929190613cec565b60405160208183030381529060405290506000610a618a608001516007611a74565b610a708b60a001516007611a74565b604051602001610a81929190613d8d565b6040516020818303038152906040529050600081610aab600860c8610aa69190613095565b611898565b8c6101000151610aca5760405180602001604052806000815250610ae4565b604051806060016040528060228152602001614e0b602291395b604051602001610af693929190613e2a565b604051602081830303815290604052905082610b466007600a610b199190613baf565b8d60a00151610b2891906130c9565b60026101f4610b3791906130c9565b610b419190613bfa565b611898565b83610b5160c8611898565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588f604001516040518263ffffffff1660e01b8152600401610b8c919061314b565b600060405180830381865af4158015610ba9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bd2919061320c565b8f6101000151610bf15760405180602001604052806000815250610bf3565b855b604051602001610c0896959493929190613ec5565b60405160208183030381529060405292508286604051602001610c2c929190613f7f565b6040516020818303038152906040529250829850505050505050505092915050565b610c56611d89565b610cd18460000151610c6784611898565b604051602001610c779190613fe7565b60405160208183030381529060405260026007600a610c969190613baf565b8860a00151610ca591906130c9565b610caf91906130c9565b6007600a610cbd9190613baf565b8860a00151610ccc91906130c9565b611b0a565b816000018181525050610d558460000151610ceb84611898565b604051602001610cfb9190614033565b6040516020818303038152906040526007600a610d189190613baf565b8760a00151610d2791906130c9565b600860c8610d3591906130c9565b60028960a00151610d469190612b5d565b610d509190613095565b611b0a565b81602001818152505060008160400181815250506007600a610d779190613baf565b8460a00151610d8691906130c9565b816060018181525050610dc88460000151610da084611898565b604051602001610db0919061407f565b6040516020818303038152906040526005600a611b0a565b8160800181815250506000600283610de091906140a5565b14610e0a578260e00151600081518110610dfd57610dfc6140d6565b5b6020026020010151610e2b565b8260c00151600081518110610e2257610e216140d6565b5b60200260200101515b8160a001819052509392505050565b610e42611dc5565b610e8a82600001516040518060400160405280600a81526020017f7072696d617279487565000000000000000000000000000000000000000000008152506000610168611b0a565b8160000181815250508160e00151610ea6578060000151610ec5565b61016860f08260000151610eba9190613095565b610ec491906140a5565b5b81602001818152505060405180606001604052808260000151815260200160648152602001601e8152508160400181905250604051806060016040528082602001518152602001606481526020016046815250816060018190525060405180606001604052808260000151815260200160648152602001600a81525081608001819052506040518060600160405280610168600a8460000151610f689190613095565b610f7291906140a5565b815260200160648152602001600a8152508160a0018190525073__$5187c88d6fd7cbb2d86814aea483adb806$__635c1b88f9826000015160018560400151610fbb9190613095565b6040518363ffffffff1660e01b8152600401610fd8929190614114565b600060405180830381865af4158015610ff5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061101e919061424d565b8160c0018190525073__$5187c88d6fd7cbb2d86814aea483adb806$__635c1b88f98260200151600185604001516110569190613095565b6040518363ffffffff1660e01b8152600401611073929190614114565b600060405180830381865af4158015611090573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110b9919061424d565b8160e00181905250919050565b606060006110d78360600151611898565b6110e48460600151611898565b6110f18560800151611898565b604051602001611103939291906143a0565b60405160208183030381529060405290506111218360600151611898565b61112e8460000151611898565b61113b8560200151611898565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588760a001516040518263ffffffff1660e01b8152600401611176919061314b565b600060405180830381865af4158015611193573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111bc919061320c565b846040516020016111d1959493929190614455565b604051602081830303815290604052915050919050565b6111f0611e22565b6000600860c861120091906130c9565b6007600a61120e9190613baf565b8660a0015161121d91906130c9565b6112279190613095565b9050611261856000015161123a85611898565b60405160200161124a9190614520565b604051602081830303815290604052601484611b0a565b8260200181815250506112a2856000015161127b85611898565b60405160200161128b919061456c565b604051602081830303815290604052601484611b0a565b8260600181815250506112e485600001516112bc85611898565b6040516020016112cc91906145b8565b60405160208183030381529060405260006003611b0a565b8260c0018181525050816060015182602001511380156113145750600060028360c0015161131291906140a5565b145b1561133c57600082602001519050826060015183602001818152505080836060018181525050505b600085608001516103e88760a001516113559190612b5d565b61135f91906130c9565b9050600060026007600a6113739190613baf565b886080015161138291906130c9565b61138c9190612b5d565b90506113d96103e8846103e887602001516113a79190612b5d565b6113b191906130c9565b6103e86113be9190613bfa565b836113c99190612b5d565b6113d391906130c9565b82611b7a565b84608001818152505061142d6103e8846103e887606001516113fb9190612b5d565b61140591906130c9565b6103e86114129190613bfa565b8361141d9190612b5d565b61142791906130c9565b82611b7a565b8460a00181815250506000826103e8866020015161144b91906145de565b611455919061302b565b90506002856080015161146891906145de565b8161147391906146f5565b8560000181815250506000836103e8876060015161149191906145de565b61149b919061302b565b905060028660a001516114ae91906145de565b816007600a6114bd9190613baf565b8b608001516114cc91906130c9565b60026114d891906145de565b6114e291906146f5565b6114ec9190612fb8565b86604001818152505061152e896000015161150689611898565b604051602001611516919061475e565b60405160208183030381529060405260036007611b0a565b8660e0018181525050600060028861154691906140a5565b1461157b578760e0015160018861155d9190613095565b8151811061156e5761156d6140d6565b5b60200260200101516115a7565b8760c0015160018861158d9190613095565b8151811061159e5761159d6140d6565b5b60200260200101515b86610100018190525050505050509392505050565b606060006115c983611603565b905060018161010001901515908115158152505060006115e882610e3a565b905060006115f683836104cc565b9050809350505050919050565b61160b611e74565b81816000018181525050611658826040518060400160405280600b81526020017f72657065746974696f6e7300000000000000000000000000000000000000000081525060036014611b0a565b8160200181815250506116a4826040518060400160405280601281526020017f6e756d496e7369646541727469666163747300000000000000000000000000008152506003600a611b0a565b8160400181815250506116f0826040518060400160405280601381526020017f6e756d4f7574736964654172746966616374730000000000000000000000000081525060016004611b0a565b816060018181525050600561173e836040518060400160405280600b81526020017f6861734772616469656e740000000000000000000000000000000000000000008152506001600a611b0a565b148160c00190151590811515815250506008611793836040518060400160405280600e81526020017f7365636f6e64617279436f6c6f7200000000000000000000000000000000000081525060016008611b0a565b148160e0019015159081151581525050600060b4672b992ddfa23249d6600284602001516101686117c491906130c9565b60b46117d09190613bfa565b6117da91906130c9565b6117e49190612b5d565b6117ee91906130c9565b9050600760126117fe9190613bfa565b600a61180a9190613baf565b61181382611b93565b60c861181f91906145de565b611829919061302b565b826080018181525050600760126118409190613bfa565b600a61184c9190613baf565b61185582611bc0565b60c861186191906145de565b61186b919061302b565b8260a001818152505050919050565b611882611e74565b600061188d83611603565b905080915050919050565b6060600082036118df576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611a1b565b600082905060005b600082146119115780806118fa90613402565b915050600a8261190a91906130c9565b91506118e7565b60008167ffffffffffffffff81111561192d5761192c611f11565b5b6040519080825280601f01601f19166020018201604052801561195f5781602001600182028036833780820191505090505b50905060008290505b60008614611a135760018161197d9190613bfa565b90506000600a808861198f91906130c9565b6119999190612b5d565b876119a49190613bfa565b60306119b09190614791565b905060008160f81b9050808484815181106119ce576119cd6140d6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88611a0a91906130c9565b97505050611968565b819450505050505b919050565b60606000821215611a6357611a3d82611a38906147c6565b611898565b604051602001611a4d9190614834565b6040516020818303038152906040529050611a6f565b611a6c82611898565b90505b919050565b6060611a9682600a611a869190613baf565b84611a9191906130c9565b611898565b611ab683600a611aa69190613baf565b85611ab191906140a5565b611898565b604051602001611ac7929190614880565b604051602081830303815290604052905092915050565b60608282604051602001611af3929190614971565b604051602081830303815290604052905092915050565b600080611b3f85611b1a88611898565b604051602001611b2b9291906133de565b604051602081830303815290604052611d56565b90508360018585611b509190613bfa565b611b5a9190613095565b82611b6591906140a5565b611b6f9190613095565b915050949350505050565b6000818310611b895781611b8b565b825b905092915050565b6000611bb96002672b992ddfa23249d681611bb157611bb0612ffc565b5b048301611bc0565b9050919050565b6000672b992ddfa23249d6600202672b992ddfa23249d66002028381611be957611be8612ffc565b5b06634000000063ffffffff160281611c0457611c03612ffc565b5b0491506000600160106001901b0360106008601c030384901c1690506000600160086001901b036008601c0385901c169050600080631000000063ffffffff168616149050600080632000000063ffffffff1687161415905081611c6d57826001610100030392505b60006040518061044001604052806104048152602001614a07610404913990506000600460ff1660028601029050600081830151905060006001600460080260ff166001901b03600460080260ff1683901c16905060006001600460080260ff166001901b0383169050600060108a84840302901c9050600088611cf357818303611cf7565b8184015b90508715611d25577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810290505b637fffffff670de0b6b3a7640000820281611d4357611d42612ffc565b5b059b505050505050505050505050919050565b600081604051602001611d6991906149ef565b6040516020818303038152906040528051906020012060001c9050919050565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001611dbf611ec6565b81525090565b6040518061010001604052806000815260200160008152602001611de7611ec6565b8152602001611df4611ec6565b8152602001611e01611ec6565b8152602001611e0e611ec6565b815260200160608152602001606081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611e6e611ec6565b81525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000151581525090565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f4982611f00565b810181811067ffffffffffffffff82111715611f6857611f67611f11565b5b80604052505050565b6000611f7b611ee7565b9050611f878282611f40565b919050565b600080fd5b6000819050919050565b611fa481611f91565b8114611faf57600080fd5b50565b600081359050611fc181611f9b565b92915050565b6000819050919050565b611fda81611fc7565b8114611fe557600080fd5b50565b600081359050611ff781611fd1565b92915050565b60006060828403121561201357612012611efb565b5b61201d6060611f71565b9050600061202d84828501611fe8565b600083015250602061204184828501611fe8565b602083015250604061205584828501611fe8565b60408301525092915050565b6000610160828403121561207857612077611efb565b5b612083610120611f71565b9050600061209384828501611fb2565b60008301525060206120a784828501611fb2565b60208301525060406120bb84828501611fb2565b60408301525060606120cf84828501611fb2565b60608301525060806120e384828501611fe8565b60808301525060a06120f784828501611fe8565b60a08301525060c061210b84828501611fe8565b60c08301525060e061211f84828501611fe8565b60e08301525061010061213484828501611ffd565b6101008301525092915050565b6000610160828403121561215857612157611ef1565b5b600061216684828501612061565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121a957808201518184015260208101905061218e565b60008484015250505050565b60006121c08261216f565b6121ca818561217a565b93506121da81856020860161218b565b6121e381611f00565b840191505092915050565b6000602082019050818103600083015261220881846121b5565b905092915050565b60008115159050919050565b61222581612210565b811461223057600080fd5b50565b6000813590506122428161221c565b92915050565b6000610120828403121561225f5761225e611efb565b5b61226a610120611f71565b9050600061227a84828501611fe8565b600083015250602061228e84828501611fe8565b60208301525060406122a284828501611fe8565b60408301525060606122b684828501611fe8565b60608301525060806122ca84828501611fe8565b60808301525060a06122de84828501611fe8565b60a08301525060c06122f284828501612233565b60c08301525060e061230684828501612233565b60e08301525061010061231b84828501612233565b6101008301525092915050565b600080fd5b600067ffffffffffffffff82111561234857612347611f11565b5b602082029050602081019050919050565b600080fd5b600061237161236c8461232d565b611f71565b9050808382526020820190506060840283018581111561239457612393612359565b5b835b818110156123bd57806123a98882611ffd565b845260208401935050606081019050612396565b5050509392505050565b600082601f8301126123dc576123db612328565b5b81356123ec84826020860161235e565b91505092915050565b6000610200828403121561240c5761240b611efb565b5b612417610100611f71565b9050600061242784828501611fe8565b600083015250602061243b84828501611fe8565b602083015250604061244f84828501611ffd565b60408301525060a061246384828501611ffd565b60608301525061010061247884828501611ffd565b60808301525061016061248d84828501611ffd565b60a0830152506101c082013567ffffffffffffffff8111156124b2576124b1611f8c565b5b6124be848285016123c7565b60c0830152506101e082013567ffffffffffffffff8111156124e3576124e2611f8c565b5b6124ef848285016123c7565b60e08301525092915050565b600080610140838503121561251357612512611ef1565b5b600061252185828601612248565b92505061012083013567ffffffffffffffff81111561254357612542611ef6565b5b61254f858286016123f5565b9150509250929050565b6000806000610160848603121561257357612572611ef1565b5b600061258186828701612248565b93505061012084013567ffffffffffffffff8111156125a3576125a2611ef6565b5b6125af868287016123f5565b9250506101406125c186828701611fe8565b9150509250925092565b6125d481611fc7565b82525050565b6060820160008201516125f060008501826125cb565b50602082015161260360208501826125cb565b50604082015161261660408501826125cb565b50505050565b6101008201600082015161263360008501826125cb565b50602082015161264660208501826125cb565b50604082015161265960408501826125cb565b50606082015161266c60608501826125cb565b50608082015161267f60808501826125cb565b5060a082015161269260a08501826125da565b50505050565b6000610100820190506126ae600083018461261c565b92915050565b600061012082840312156126cb576126ca611ef1565b5b60006126d984828501612248565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061271a83836125da565b60608301905092915050565b6000602082019050919050565b600061273e826126e2565b61274881856126ed565b9350612753836126fe565b8060005b8381101561278457815161276b888261270e565b975061277683612726565b925050600181019050612757565b5085935050505092915050565b6000610200830160008301516127aa60008601826125cb565b5060208301516127bd60208601826125cb565b5060408301516127d060408601826125da565b5060608301516127e360a08601826125da565b5060808301516127f76101008601826125da565b5060a083015161280b6101608601826125da565b5060c08301518482036101c08601526128248282612733565b91505060e08301518482036101e086015261283f8282612733565b9150508091505092915050565b600060208201905081810360008301526128668184612791565b905092915050565b6000610100828403121561288557612884611efb565b5b61288f60c0611f71565b9050600061289f84828501611fe8565b60008301525060206128b384828501611fe8565b60208301525060406128c784828501611fe8565b60408301525060606128db84828501611fe8565b60608301525060806128ef84828501611fe8565b60808301525060a061290384828501611ffd565b60a08301525092915050565b6000610100828403121561292657612925611ef1565b5b60006129348482850161286e565b91505092915050565b61294681611f91565b82525050565b61016082016000820151612963600085018261293d565b506020820151612976602085018261293d565b506040820151612989604085018261293d565b50606082015161299c606085018261293d565b5060808201516129af60808501826125cb565b5060a08201516129c260a08501826125cb565b5060c08201516129d560c08501826125cb565b5060e08201516129e860e08501826125cb565b506101008201516129fd6101008501826125da565b50505050565b600061016082019050612a19600083018461294c565b92915050565b600060208284031215612a3557612a34611ef1565b5b6000612a4384828501611fe8565b91505092915050565b612a5581612210565b82525050565b61012082016000820151612a7260008501826125cb565b506020820151612a8560208501826125cb565b506040820151612a9860408501826125cb565b506060820151612aab60608501826125cb565b506080820151612abe60808501826125cb565b5060a0820151612ad160a08501826125cb565b5060c0820151612ae460c0850182612a4c565b5060e0820151612af760e0850182612a4c565b50610100820151612b0c610100850182612a4c565b50505050565b600061012082019050612b286000830184612a5b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b6882611fc7565b9150612b7383611fc7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612bac57612bab612b2e565b5b828202905092915050565b600081905092915050565b7f3c616e696d617465206174747269627574654e616d653d2272222076616c756560008201527f733d220000000000000000000000000000000000000000000000000000000000602082015250565b6000612c1e602383612bb7565b9150612c2982612bc2565b602382019050919050565b6000612c3f8261216f565b612c498185612bb7565b9350612c5981856020860161218b565b80840191505092915050565b7f3b00000000000000000000000000000000000000000000000000000000000000815250565b7f222063616c634d6f64653d226c696e65617222206475723d2200000000000000815250565b7f732220726570656174436f756e743d22696e646566696e697465222f3e000000815250565b6000612ce282612c11565b9150612cee8288612c34565b9150612cf982612c65565b600182019150612d098287612c34565b9150612d1482612c65565b600182019150612d248286612c34565b9150612d2f82612c65565b600182019150612d3f8285612c34565b9150612d4a82612c8b565b601982019150612d5a8284612c34565b9150612d6582612cb1565b601d820191508190509695505050505050565b7f3c616e696d617465206174747269627574654e616d653d226379222076616c7560008201527f65733d2200000000000000000000000000000000000000000000000000000000602082015250565b6000612dd4602483612bb7565b9150612ddf82612d78565b602482019050919050565b6000612df68289612c34565b9150612e0182612dc7565b9150612e0d8288612c34565b9150612e1882612c65565b600182019150612e288287612c34565b9150612e3382612c65565b600182019150612e438286612c34565b9150612e4e82612c65565b600182019150612e5e8285612c34565b9150612e6982612c8b565b601982019150612e798284612c34565b9150612e8482612cb1565b601d82019150819050979650505050505050565b7f3c616e696d617465206174747269627574654e616d653d226378222076616c7560008201527f65733d2200000000000000000000000000000000000000000000000000000000602082015250565b6000612ef4602483612bb7565b9150612eff82612e98565b602482019050919050565b6000612f168289612c34565b9150612f2182612ee7565b9150612f2d8288612c34565b9150612f3882612c65565b600182019150612f488287612c34565b9150612f5382612c65565b600182019150612f638286612c34565b9150612f6e82612c65565b600182019150612f7e8285612c34565b9150612f8982612c8b565b601982019150612f998284612c34565b9150612fa482612cb1565b601d82019150819050979650505050505050565b6000612fc382611f91565b9150612fce83611f91565b925082820190508281121560008312168382126000841215161715612ff657612ff5612b2e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061303682611f91565b915061304183611f91565b92508261305157613050612ffc565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561308a57613089612b2e565b5b828205905092915050565b60006130a082611fc7565b91506130ab83611fc7565b92508282019050808211156130c3576130c2612b2e565b5b92915050565b60006130d482611fc7565b91506130df83611fc7565b9250826130ef576130ee612ffc565b5b828204905092915050565b61310381611fc7565b82525050565b60608201600082015161311f60008501826130fa565b50602082015161313260208501826130fa565b50604082015161314560408501826130fa565b50505050565b60006060820190506131606000830184613109565b92915050565b600080fd5b600067ffffffffffffffff82111561318657613185611f11565b5b61318f82611f00565b9050602081019050919050565b60006131af6131aa8461316b565b611f71565b9050828152602081018484840111156131cb576131ca613166565b5b6131d684828561218b565b509392505050565b600082601f8301126131f3576131f2612328565b5b815161320384826020860161319c565b91505092915050565b60006020828403121561322257613221611ef1565b5b600082015167ffffffffffffffff8111156132405761323f611ef6565b5b61324c848285016131de565b91505092915050565b7f3c636972636c652063783d220000000000000000000000000000000000000000815250565b7f222063793d220000000000000000000000000000000000000000000000000000815250565b7f2220723d22000000000000000000000000000000000000000000000000000000815250565b7f222066696c6c3d22000000000000000000000000000000000000000000000000815250565b7f223e000000000000000000000000000000000000000000000000000000000000815250565b7f3c2f636972636c653e0000000000000000000000000000000000000000000000815250565b600061334482613255565b600c820191506133548288612c34565b915061335f8261327b565b60068201915061336f8287612c34565b915061337a826132a1565b60058201915061338a8286612c34565b9150613395826132c7565b6008820191506133a58285612c34565b91506133b0826132ed565b6002820191506133c08284612c34565b91506133cb82613313565b6009820191508190509695505050505050565b60006133ea8285612c34565b91506133f68284612c34565b91508190509392505050565b600061340d82611fc7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361343f5761343e612b2e565b5b600182019050919050565b7f3c75736520687265663d222374696c6522207472616e73666f726d3d22726f7460008201527f6174652800000000000000000000000000000000000000000000000000000000602082015250565b60006134a6602483612bb7565b91506134b18261344a565b602482019050919050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b7f2922202f3e000000000000000000000000000000000000000000000000000000815250565b60006135148287612c34565b915061351f82613499565b915061352b8286612c34565b9150613536826134bc565b6001820191506135468285612c34565b9150613551826134bc565b6001820191506135618284612c34565b915061356c826134e2565b60058201915081905095945050505050565b7f3c636c6970506174682069643d22636c6970223e000000000000000000000000815250565b7f3c7061746820643d224d302c304c000000000000000000000000000000000000815250565b7f4c00000000000000000000000000000000000000000000000000000000000000815250565b7f2c30410000000000000000000000000000000000000000000000000000000000815250565b7f2c302c302c302c302c305a22202f3e0000000000000000000000000000000000815250565b7f3c2f636c6970506174683e000000000000000000000000000000000000000000815250565b600061366d8261357e565b60148201915061367c826135a4565b600e8201915061368c8288612c34565b9150613697826134bc565b6001820191506136a78287612c34565b91506136b2826135ca565b6001820191506136c28286612c34565b91506136cd826135f0565b6003820191506136dd8285612c34565b91506136e8826134bc565b6001820191506136f88284612c34565b915061370382613616565b600f820191506137128261363c565b600b820191508190509695505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f737667222076696577426f783d22302030200000000000000000000000602082015250565b6000613781603583612bb7565b915061378c82613725565b603582019050919050565b7f2000000000000000000000000000000000000000000000000000000000000000815250565b7f222077696474683d220000000000000000000000000000000000000000000000815250565b7f22206865696768743d2200000000000000000000000000000000000000000000815250565b7f223e3c646566733e000000000000000000000000000000000000000000000000815250565b7f3c672069643d2274696c652220636c69702d706174683d2275726c2823636c6960008201527f7029223e00000000000000000000000000000000000000000000000000000000602082015250565b600061388b602483612bb7565b91506138968261382f565b602482019050919050565b7f3c7265637420783d22302220793d222d00000000000000000000000000000000815250565b60006138d282613774565b91506138de828c612c34565b91506138e982613797565b6001820191506138f9828b612c34565b9150613904826137bd565b600982019150613914828a612c34565b915061391f826137e3565b600a8201915061392f8289612c34565b915061393a82613809565b60088201915061394a8288612c34565b91506139568287612c34565b91506139618261387e565b915061396c826138a1565b60108201915061397c8286612c34565b9150613987826137bd565b6009820191506139978285612c34565b91506139a2826137e3565b600a820191506139b28284612c34565b91506139bd826132c7565b6008820191508190509a9950505050505050505050565b7f223e3c2f726563743e0000000000000000000000000000000000000000000000815250565b7f3c2f673e00000000000000000000000000000000000000000000000000000000815250565b6000613a2c8287612c34565b9150613a388286612c34565b9150613a43826139d4565b600982019150613a538285612c34565b9150613a5f8284612c34565b9150613a6a826139fa565b60048201915081905095945050505050565b60008160011c9050919050565b6000808291508390505b6001851115613ad357808604811115613aaf57613aae612b2e565b5b6001851615613abe5780820291505b8081029050613acc85613a7c565b9450613a93565b94509492505050565b600082613aec5760019050613ba8565b81613afa5760009050613ba8565b8160018114613b105760028114613b1a57613b49565b6001915050613ba8565b60ff841115613b2c57613b2b612b2e565b5b8360020a915084821115613b4357613b42612b2e565b5b50613ba8565b5060208310610133831016604e8410600b8410161715613b7e5782820a905083811115613b7957613b78612b2e565b5b613ba8565b613b8b8484846001613a89565b92509050818404811115613ba257613ba1612b2e565b5b81810290505b9392505050565b6000613bba82611fc7565b9150613bc583611fc7565b9250613bf27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613adc565b905092915050565b6000613c0582611fc7565b9150613c1083611fc7565b9250828203905081811115613c2857613c27612b2e565b5b92915050565b7f3c2f646566733e00000000000000000000000000000000000000000000000000815250565b7f3c726563742077696474683d2200000000000000000000000000000000000000815250565b7f3c672069643d226b616c6569646f73636f706554696c6522207472616e73666f60008201527f726d3d227472616e736c61746528000000000000000000000000000000000000602082015250565b6000613cd6602e83612bb7565b9150613ce182613c7a565b602e82019050919050565b6000613cf88288612c34565b9150613d0382613c2e565b600782019150613d1282613c54565b600d82019150613d228287612c34565b9150613d2d826137e3565b600a82019150613d3d8286612c34565b9150613d48826132c7565b600882019150613d588285612c34565b9150613d63826139d4565b600982019150613d7282613cc9565b9150613d7e8284612c34565b91508190509695505050505050565b6000613d9882613255565b600c82019150613da88285612c34565b9150613db38261327b565b600682019150613dc38284612c34565b9150613dce826132a1565b6005820191508190509392505050565b7f222066696c6c3d226e6f6e652200000000000000000000000000000000000000815250565b7f2f3e000000000000000000000000000000000000000000000000000000000000815250565b6000613e368286612c34565b9150613e428285612c34565b9150613e4d82613dde565b600d82019150613e5d8284612c34565b9150613e6882613e04565b600282019150819050949350505050565b7f29223e0000000000000000000000000000000000000000000000000000000000815250565b7f22202f3e00000000000000000000000000000000000000000000000000000000815250565b6000613ed18289612c34565b9150613edc826134bc565b600182019150613eec8288612c34565b9150613ef782613e79565b600382019150613f078287612c34565b9150613f138286612c34565b9150613f1e826132c7565b600882019150613f2e8285612c34565b9150613f3982613e9f565b600482019150613f498284612c34565b9150819050979650505050505050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815250565b6000613f8b8285612c34565b9150613f978284612c34565b9150613fa2826139fa565b600482019150613fb182613f59565b6006820191508190509392505050565b7f7265637477696474680000000000000000000000000000000000000000000000815250565b6000613ff282613fc1565b6009820191506140028284612c34565b915081905092915050565b7f7265637468656967687400000000000000000000000000000000000000000000815250565b600061403e8261400d565b600a8201915061404e8284612c34565b915081905092915050565b7f726563746475726174696f6e0000000000000000000000000000000000000000815250565b600061408a82614059565b600c8201915061409a8284612c34565b915081905092915050565b60006140b082611fc7565b91506140bb83611fc7565b9250826140cb576140ca612ffc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61410e81611fc7565b82525050565b60006040820190506141296000830185614105565b6141366020830184614105565b9392505050565b60008151905061414c81611fd1565b92915050565b60006060828403121561416857614167611efb565b5b6141726060611f71565b905060006141828482850161413d565b60008301525060206141968482850161413d565b60208301525060406141aa8482850161413d565b60408301525092915050565b60006141c96141c48461232d565b611f71565b905080838252602082019050606084028301858111156141ec576141eb612359565b5b835b8181101561421557806142018882614152565b8452602084019350506060810190506141ee565b5050509392505050565b600082601f83011261423457614233612328565b5b81516142448482602086016141b6565b91505092915050565b60006020828403121561426357614262611ef1565b5b600082015167ffffffffffffffff81111561428157614280611ef6565b5b61428d8482850161421f565b91505092915050565b7f3c616e696d6174655472616e73666f726d206174747269627574654e616d653d60008201527f227472616e73666f726d2220747970653d22726f74617465222066726f6d3d2260208201527f302030202d000000000000000000000000000000000000000000000000000000604082015250565b6000614318604583612bb7565b915061432382614296565b604582019050919050565b7f2220746f3d222d3336302030202d000000000000000000000000000000000000815250565b7f2220626567696e3d22307322206475723d220000000000000000000000000000815250565b7f732220726570656174436f756e743d22696e646566696e69746522202f3e0000815250565b60006143ab8261430b565b91506143b78286612c34565b91506143c28261432e565b600e820191506143d28285612c34565b91506143dd82614354565b6012820191506143ed8284612c34565b91506143f88261437a565b601e82019150819050949350505050565b7f3c726563742072783d2233222072793d22332220783d22302220793d222d0000815250565b7f3c2f726563743e00000000000000000000000000000000000000000000000000815250565b600061446082614409565b601e820191506144708288612c34565b915061447b826137bd565b60098201915061448b8287612c34565b9150614496826137e3565b600a820191506144a68286612c34565b91506144b1826132c7565b6008820191506144c18285612c34565b91506144cc826132ed565b6002820191506144dc8284612c34565b91506144e78261442f565b6007820191508190509695505050505050565b7f7931000000000000000000000000000000000000000000000000000000000000815250565b600061452b826144fa565b60028201915061453b8284612c34565b915081905092915050565b7f7932000000000000000000000000000000000000000000000000000000000000815250565b600061457782614546565b6002820191506145878284612c34565b915081905092915050565b7f616c7465726e6174696e67436c61737300000000000000000000000000000000815250565b60006145c382614592565b6010820191506145d38284612c34565b915081905092915050565b60006145e982611f91565b91506145f483611f91565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561463357614632612b2e565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156146705761466f612b2e565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156146ad576146ac612b2e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156146ea576146e9612b2e565b5b828202905092915050565b600061470082611f91565b915061470b83611f91565b925082820390508181126000841216828213600085121516171561473257614731612b2e565b5b92915050565b7f6475726174696f6e000000000000000000000000000000000000000000000000815250565b600061476982614738565b6008820191506147798284612c34565b915081905092915050565b600060ff82169050919050565b600061479c82614784565b91506147a783614784565b9250828201905060ff8111156147c0576147bf612b2e565b5b92915050565b60006147d182611f91565b91507f8000000000000000000000000000000000000000000000000000000000000000820361480357614802612b2e565b5b816000039050919050565b7f2d00000000000000000000000000000000000000000000000000000000000000815250565b600061483f8261480e565b60018201915061484f8284612c34565b915081905092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000815250565b600061488c8285612c34565b91506148978261485a565b6001820191506148a78284612c34565b91508190509392505050565b7f3c6c696e6561724772616469656e742069643d226772616469656e74223e0000815250565b7f3c73746f70206f66667365743d223025222073746f702d636f6c6f723d220000815250565b7f222f3e0000000000000000000000000000000000000000000000000000000000815250565b7f3c73746f70206f66667365743d2231303025222073746f702d636f6c6f723d22815250565b7f3c2f6c696e6561724772616469656e743e000000000000000000000000000000815250565b600061497c826148b3565b601e8201915061498b826148d9565b601e8201915061499b8285612c34565b91506149a6826148ff565b6003820191506149b582614925565b6020820191506149c58284612c34565b91506149d0826148ff565b6003820191506149df8261494b565b6011820191508190509392505050565b60006149fb8284612c34565b91508190509291505056fe0000000000c90f8801921d20025b26d703242abf03ed26e604b6195d057f00350647d97c0710a34507d95b9e08a2009a096a90490a3308bc0afb68050bc3ac350c8bd35e0d53db920e1bc2e40ee387660fab272b1072a0481139f0cf120116d512c8106e138edbb1145576b1151bdf8515e2144416a81305176dd9de183366e818f8b83c19bdcbf31a82a0251b4732ef1c0b826a1ccf8cb31d934fe51e56ca1e1f19f97b1fdcdc1b209f701c2161b39f2223a4c522e541af23a6887e2467775725280c5d25e845b626a8218527679df42826b92828e5714a29a3c4852a61b1012b1f34eb2bdc4e6f2c98fbba2d553afb2e110a622ecc681e2f8752623041c76030fbc54d31b54a5d326e54c73326e2c233def2873496824f354d905636041ad936ba2013376f9e46382493b038d8fe93398cdd323a402dd13af2eeb73ba51e293c56ba703d07c1d53db832a53e680b2c3f1749b73fc5ec974073f21d4121589a41ce1e64427a41d04325c13543d09aec447acd50452456bc45cd358f46756827471cece647c3c22e4869e664490f57ee49b415334a581c9d4afb6c974b9e038f4c3fdff34ce100344d8162c34e2106174ebfe8a44f5e08e24ffb654c5097fc5e5133cc9451ced46e5269126e53028517539b2aef5433027d54ca0a4a556040e255f5a4d2568a34a9571deef957b0d2555842dd5458d40e8c5964649759f3de125a8279995b1035ce5b9d11535c290acc5cb420df5d3e52365dc79d7b5e50015d5ed77c895f5e0db25fe3b38d60686cce60ec382f616f146b61f1003e6271fa6862f201ac637114cc63ef328f646c59bf64e889256563bf9165ddfbd266573cbb66cf811f6746c7d767bd0fbc683257aa68a69e806919e31f698c246b69fd614a6a6d98a36adcc9646b4af2786bb812d06c24295f6c8f351b6cf934fb6d6227f96dca0d146e30e3496e96a99c6efb5f116f5f02b16fc1938470231099708378fe70e2cbc571410804719e2cd171fa394872552c8472af05a67307c3cf735f662573b5ebd0740b53fa745f9dd074b2c8837504d3447555bd4b75a585ce75f42c0a7641af3c768e0ea576d9498877235f2c776c4eda77b417df77fab988784033287884841378c7aba17909a92c794a7c11798a23b079c89f6d7a05eeac7a4210d87a7d055a7ab6cba37aef63237b26cb4e7b5d039d7b920b887bc5e28f7bf8882f7c29fbed7c5a3d4f7c894bdd7cb727237ce3ceb17d0f42177d3980eb7d628ac57d8a5f3f7db0fdf77dd6668e7dfa98a77e1d93e97e3f57fe7e5fe4927e7f39567e9d55fb7eba3a387ed5e5c57ef0585f7f0991c37f2191b37f3857f57f4de4507f62368e7f754e7f7f872bf27f97cebc7fa736b37fb563b27fc255957fce0c3d7fd8878d7fe1c76a7fe9cbbf7ff094777ff621817ffa72d07ffd88597fff62157fffffff207374726f6b653d222345424139343722207374726f6b652d77696474683d223422a2646970667358221220db236564b781b2c68f72eb5e422d5bea4318167240040576c1c49492255a71ab64736f6c63430008100033",
  "libraries": {
    "utils": "0x8C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f",
    "Trigonometry": "0x9F9eE8D726e50C58a0034f54C3985a1F7fd73563"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}