{
  "address": "0x018422C4Cb7A0A88c417E98A807636BE80bf3f51",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "_kaleidoscope",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "primaryHue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryHue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "primaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "secondaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "backgroundColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "darkerSecondaryHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "primaryColorsHsl",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "secondaryColorsHsl",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Renderer.ColorPalette",
          "name": "_palette",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "circleAtIndexForKaleidescope",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "x1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "x2",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y2",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "radius1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "radius2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alternatingClass",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Renderer.AnimatedCircle",
          "name": "circle",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "_kaleidoscope",
          "type": "tuple"
        }
      ],
      "name": "colorPaletteForKaleidescope",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "primaryHue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryHue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "primaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "secondaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "backgroundColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "darkerSecondaryHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "primaryColorsHsl",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "secondaryColorsHsl",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Renderer.ColorPalette",
          "name": "palette",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "x1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "x2",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y2",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "radius1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "radius2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alternatingClass",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Renderer.AnimatedCircle",
          "name": "_circle",
          "type": "tuple"
        }
      ],
      "name": "getCircleSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "_kaleidoscope",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "primaryHue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryHue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "primaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "secondaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "backgroundColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "darkerSecondaryHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "primaryColorsHsl",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "secondaryColorsHsl",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Renderer.ColorPalette",
          "name": "_palette",
          "type": "tuple"
        }
      ],
      "name": "getKaleidoscopeSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "width",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Renderer.AnimatedRectangle",
          "name": "_rectangle",
          "type": "tuple"
        }
      ],
      "name": "getRectangleSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "kaleidoscopeForTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "kaleidoscope",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repetitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOutsideArtifacts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerX_precise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerY_precise",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasGradient",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasSecondaryColor",
              "type": "bool"
            }
          ],
          "internalType": "struct Renderer.Kaleidoscope",
          "name": "_kaleidoscope",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "primaryHue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryHue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "primaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "secondaryColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "backgroundColorHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "darkerSecondaryHsl",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "primaryColorsHsl",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL[]",
              "name": "secondaryColorsHsl",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Renderer.ColorPalette",
          "name": "_palette",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "rectangleAtIndexForKaleidescope",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "width",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "h",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "l",
                  "type": "uint256"
                }
              ],
              "internalType": "struct utils.HSL",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Renderer.AnimatedRectangle",
          "name": "rectangle",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1877d595b07939ac42dea6007e00bbce20df4425b386dd7696fef5aba6538c3c",
  "receipt": {
    "to": null,
    "from": "0x4594a187923D9c414e28Dfcc4d0242BEBDaF2301",
    "contractAddress": "0x018422C4Cb7A0A88c417E98A807636BE80bf3f51",
    "transactionIndex": 13,
    "gasUsed": "4251286",
    "logsBloom": "0x
    "blockHash": "0xc978cfbb1eb90ae2913fae8340744e80df27c98ad59bd18bbf299d33c46dd706",
    "transactionHash": "0x1877d595b07939ac42dea6007e00bbce20df4425b386dd7696fef5aba6538c3c",
    "logs": [],
    "blockNumber": 8283342,
    "cumulativeGasUsed": "7499921",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "ab6fe40a7d80192eb48b25fe59de48ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"_kaleidoscope\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"primaryHue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryHue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"primaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"secondaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"backgroundColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"darkerSecondaryHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"primaryColorsHsl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"secondaryColorsHsl\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Renderer.ColorPalette\",\"name\":\"_palette\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"circleAtIndexForKaleidescope\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"x2\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y2\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"radius1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"radius2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alternatingClass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Renderer.AnimatedCircle\",\"name\":\"circle\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"_kaleidoscope\",\"type\":\"tuple\"}],\"name\":\"colorPaletteForKaleidescope\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"primaryHue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryHue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"primaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"secondaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"backgroundColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"darkerSecondaryHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"primaryColorsHsl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"secondaryColorsHsl\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Renderer.ColorPalette\",\"name\":\"palette\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"x2\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y2\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"radius1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"radius2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alternatingClass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Renderer.AnimatedCircle\",\"name\":\"_circle\",\"type\":\"tuple\"}],\"name\":\"getCircleSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"_kaleidoscope\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"primaryHue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryHue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"primaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"secondaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"backgroundColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"darkerSecondaryHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"primaryColorsHsl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"secondaryColorsHsl\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Renderer.ColorPalette\",\"name\":\"_palette\",\"type\":\"tuple\"}],\"name\":\"getKaleidoscopeSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Renderer.AnimatedRectangle\",\"name\":\"_rectangle\",\"type\":\"tuple\"}],\"name\":\"getRectangleSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"kaleidoscopeForTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"kaleidoscope\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repetitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutsideArtifacts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerX_precise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerY_precise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasGradient\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSecondaryColor\",\"type\":\"bool\"}],\"internalType\":\"struct Renderer.Kaleidoscope\",\"name\":\"_kaleidoscope\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"primaryHue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryHue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"primaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"secondaryColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"backgroundColorHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"darkerSecondaryHsl\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"primaryColorsHsl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL[]\",\"name\":\"secondaryColorsHsl\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Renderer.ColorPalette\",\"name\":\"_palette\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"rectangleAtIndexForKaleidescope\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"internalType\":\"struct utils.HSL\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Renderer.AnimatedRectangle\",\"name\":\"rectangle\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Renderer.sol\":\"Renderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Renderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./Trigonometry.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Renderer {\\n  uint256 constant SIZE = 500;\\n  uint256 constant RADIUS = 200;\\n  uint256 constant PRECISION_DEGREE = 7;\\n  uint256 constant PRECISION = 10**PRECISION_DEGREE;\\n\\n  struct ColorPalette {\\n    uint256 primaryHue;\\n    uint256 secondaryHue;\\n    utils.HSL primaryColorHsl;\\n    utils.HSL secondaryColorHsl;\\n    utils.HSL backgroundColorHsl;\\n    utils.HSL darkerSecondaryHsl;\\n    utils.HSL[] primaryColorsHsl;\\n    utils.HSL[] secondaryColorsHsl;\\n  }\\n\\n  struct Kaleidoscope {\\n    uint256 tokenId;\\n    uint256 repetitions;\\n    uint256 numInsideArtifacts;\\n    uint256 numOutsideArtifacts;\\n    uint256 centerX_precise;\\n    uint256 centerY_precise;\\n    bool hasGradient;\\n    bool hasSecondaryColor;\\n  }\\n\\n  struct AnimatedCircle {\\n    // Start position\\n    int256 x1;\\n    int256 y1;\\n    // End position\\n    int256 x2;\\n    int256 y2;\\n    uint256 radius1;\\n    uint256 radius2;\\n    uint256 alternatingClass;\\n    uint256 duration;\\n    utils.HSL color;\\n  }\\n\\n  struct AnimatedTriangle {\\n    uint256 x1;\\n    uint256 y1;\\n    uint256 centerX;\\n    uint256 centerY;\\n    uint256 duration;\\n    utils.HSL color;\\n  }\\n\\n  struct AnimatedRectangle {\\n    uint256 width;\\n    uint256 height;\\n    uint256 x;\\n    uint256 y;\\n    uint256 duration;\\n    utils.HSL color;\\n  }\\n\\n  function colorPaletteForKaleidescope(Kaleidoscope memory _kaleidoscope)\\n    public\\n    pure\\n    returns (ColorPalette memory palette)\\n  {\\n    palette.primaryHue = utils.randomRange(_kaleidoscope.tokenId, \\\"primaryHue\\\", 0, 360);\\n    palette.secondaryHue = _kaleidoscope.hasSecondaryColor ? (palette.primaryHue + 240) % 360 : palette.primaryHue;\\n    palette.primaryColorHsl = utils.HSL(palette.primaryHue, 100, 30);\\n    palette.secondaryColorHsl = utils.HSL(palette.secondaryHue, 100, 70);\\n    palette.backgroundColorHsl = utils.HSL(palette.primaryHue, 100, 10);\\n    palette.darkerSecondaryHsl = utils.HSL((palette.primaryHue + 10) % 360, 100, 10);\\n    palette.primaryColorsHsl = utils.generateColors(palette.primaryHue, _kaleidoscope.numInsideArtifacts + 1);\\n    palette.secondaryColorsHsl = utils.generateColors(palette.secondaryHue, _kaleidoscope.numInsideArtifacts + 1);\\n\\n    return palette;\\n  }\\n\\n  function kaleidoscopeForTokenId(uint256 _tokenId) public pure returns (Kaleidoscope memory kaleidoscope) {\\n    kaleidoscope.tokenId = _tokenId;\\n    kaleidoscope.repetitions = utils.randomRange(_tokenId, \\\"repetitions\\\", 3, 20);\\n    kaleidoscope.numInsideArtifacts = utils.randomRange(_tokenId, \\\"numInsideArtifacts\\\", 3, 10);\\n    kaleidoscope.numOutsideArtifacts = utils.randomRange(_tokenId, \\\"numOutsideArtifacts\\\", 1, 4);\\n    kaleidoscope.hasGradient = utils.randomRange(_tokenId, \\\"hasGradient\\\", 1, 10) == 5;\\n    kaleidoscope.hasSecondaryColor = utils.randomRange(_tokenId, \\\"secondaryColor\\\", 1, 8) == 8;\\n\\n    uint256 angle = (((180 - 360 / kaleidoscope.repetitions) / 2) * Trigonometry.PI) / 180;\\n    kaleidoscope.centerX_precise = uint256(\\n      (int256(RADIUS) * Trigonometry.cos(angle)) / int256(10**(18 - PRECISION_DEGREE))\\n    );\\n    kaleidoscope.centerY_precise = uint256(\\n      (int256(RADIUS) * Trigonometry.sin(angle)) / int256(10**(18 - PRECISION_DEGREE))\\n    );\\n\\n    return kaleidoscope;\\n  }\\n\\n  function circleAtIndexForKaleidescope(\\n    Kaleidoscope memory _kaleidoscope,\\n    ColorPalette memory _palette,\\n    uint256 _index\\n  ) public pure returns (AnimatedCircle memory circle) {\\n    uint256 yUpperBound = (_kaleidoscope.centerY_precise / PRECISION) + RADIUS / 8;\\n\\n    circle.y1 = int256(\\n      utils.randomRange(_kaleidoscope.tokenId, string.concat(\\\"y1\\\", utils.uint2str(_index)), 20, yUpperBound)\\n    );\\n    circle.y2 = int256(\\n      utils.randomRange(_kaleidoscope.tokenId, string.concat(\\\"y2\\\", utils.uint2str(_index)), 20, yUpperBound)\\n    );\\n\\n    circle.alternatingClass = utils.randomRange(\\n      _kaleidoscope.tokenId,\\n      string.concat(\\\"alternatingClass\\\", utils.uint2str(_index)),\\n      0,\\n      3\\n    );\\n\\n    if (circle.y1 > circle.y2 && circle.alternatingClass % 2 == 0) {\\n      int256 temp = circle.y1;\\n      circle.y1 = circle.y2;\\n      circle.y2 = temp;\\n    }\\n\\n    int256 gradient_1000 = int256((_kaleidoscope.centerY_precise * 1000) / _kaleidoscope.centerX_precise);\\n\\n    uint256 radiusUB = (_kaleidoscope.centerX_precise / PRECISION) * 2;\\n    circle.radius1 = uint256(\\n      utils.min((radiusUB * (1000 - (uint256(circle.y1) * 1000) / yUpperBound)) / 1000, radiusUB)\\n    );\\n    circle.radius2 = uint256(\\n      utils.min((radiusUB * (1000 - (uint256(circle.y2) * 1000) / yUpperBound)) / 1000, radiusUB)\\n    );\\n\\n    // x1 should be within bounds of triangular path\\n    int256 lb1 = (circle.y1 * 1000) / gradient_1000;\\n    circle.x1 = int256(lb1 - int256(circle.radius1) * 2);\\n\\n    // x2 should be within bounds of triangular path\\n    int256 lb2 = (circle.y2 * 1000) / gradient_1000;\\n    circle.x2 = int256(2 * int256(_kaleidoscope.centerX_precise / PRECISION) - lb2 + int256(circle.radius2) * 2);\\n\\n    circle.duration = utils.randomRange(_kaleidoscope.tokenId, string.concat(\\\"duration\\\", utils.uint2str(_index)), 3, 7);\\n\\n    circle.color = _index % 2 == 0 ? _palette.primaryColorsHsl[_index + 1] : _palette.secondaryColorsHsl[_index + 1];\\n\\n    return circle;\\n  }\\n\\n  function rectangleAtIndexForKaleidescope(\\n    Kaleidoscope memory _kaleidoscope,\\n    ColorPalette memory _palette,\\n    uint256 _index\\n  ) public pure returns (AnimatedRectangle memory rectangle) {\\n    rectangle.width = utils.randomRange(\\n      _kaleidoscope.tokenId,\\n      string.concat(\\\"rectwidth\\\", utils.uint2str(_index)),\\n      (_kaleidoscope.centerY_precise / PRECISION) / 2,\\n      (_kaleidoscope.centerY_precise / PRECISION)\\n    );\\n    rectangle.height = utils.randomRange(\\n      _kaleidoscope.tokenId,\\n      string.concat(\\\"rectheight\\\", utils.uint2str(_index)),\\n      (_kaleidoscope.centerY_precise / PRECISION),\\n      _kaleidoscope.centerY_precise * 2 + RADIUS / 8\\n    );\\n    rectangle.x = 0;\\n    rectangle.y = _kaleidoscope.centerY_precise / PRECISION;\\n    rectangle.duration = utils.randomRange(\\n      _kaleidoscope.tokenId,\\n      string.concat(\\\"rectduration\\\", utils.uint2str(_index)),\\n      5,\\n      10\\n    );\\n    rectangle.color = _index % 2 == 0 ? _palette.primaryColorsHsl[0] : _palette.secondaryColorsHsl[0];\\n\\n    return rectangle;\\n  }\\n\\n  function getCircleSVG(AnimatedCircle memory _circle) public pure returns (string memory) {\\n    string memory animations = string.concat(\\n      '<animate attributeName=\\\"r\\\" values=\\\"',\\n      utils.uint2str(_circle.radius1),\\n      \\\";\\\",\\n      utils.uint2str(_circle.radius2),\\n      \\\";\\\",\\n      utils.uint2str(_circle.radius1),\\n      \\\";\\\",\\n      utils.uint2str(_circle.radius2),\\n      '\\\" calcMode=\\\"linear\\\" dur=\\\"',\\n      utils.uint2str(_circle.duration * 2),\\n      's\\\" repeatCount=\\\"indefinite\\\"/>'\\n    );\\n\\n    animations = string.concat(\\n      animations,\\n      '<animate attributeName=\\\"cy\\\" values=\\\"',\\n      utils.int2str(_circle.y1),\\n      \\\";\\\",\\n      utils.int2str(_circle.y2),\\n      \\\";\\\",\\n      utils.int2str(_circle.y1),\\n      \\\";\\\",\\n      utils.int2str(_circle.y2),\\n      '\\\" calcMode=\\\"linear\\\" dur=\\\"',\\n      utils.uint2str(_circle.duration * 2),\\n      's\\\" repeatCount=\\\"indefinite\\\"/>'\\n    );\\n\\n    animations = string.concat(\\n      animations,\\n      '<animate attributeName=\\\"cx\\\" values=\\\"',\\n      utils.int2str(_circle.x1),\\n      \\\";\\\",\\n      utils.int2str(_circle.x2),\\n      \\\";\\\",\\n      utils.int2str(_circle.x1),\\n      \\\";\\\",\\n      utils.int2str(_circle.x2),\\n      '\\\" calcMode=\\\"linear\\\" dur=\\\"',\\n      utils.uint2str(_circle.duration * 2),\\n      's\\\" repeatCount=\\\"indefinite\\\"/>'\\n    );\\n\\n    return\\n      string.concat(\\n        '<circle cx=\\\"',\\n        utils.int2str((_circle.x1 + _circle.x2) / 2),\\n        '\\\" cy=\\\"',\\n        utils.int2str((_circle.y1 + _circle.y2) / 2),\\n        '\\\" r=\\\"',\\n        utils.uint2str((_circle.radius1 + _circle.radius2) / 2),\\n        '\\\" fill=\\\"',\\n        utils.getHslString(_circle.color),\\n        '\\\">',\\n        animations,\\n        \\\"</circle>\\\"\\n      );\\n  }\\n\\n  function getRectangleSVG(AnimatedRectangle memory _rectangle) public pure returns (string memory) {\\n    string memory animations = string.concat(\\n      '<animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 0 -',\\n      utils.uint2str(_rectangle.y),\\n      '\\\" to=\\\"-360 0 -',\\n      utils.uint2str(_rectangle.y),\\n      '\\\" begin=\\\"0s\\\" dur=\\\"',\\n      utils.uint2str(_rectangle.duration),\\n      's\\\" repeatCount=\\\"indefinite\\\" />'\\n    );\\n\\n    return\\n      string.concat(\\n        '<rect rx=\\\"3\\\" ry=\\\"3\\\" x=\\\"0\\\" y=\\\"-',\\n        utils.uint2str(_rectangle.y),\\n        '\\\" width=\\\"',\\n        utils.uint2str(_rectangle.width),\\n        '\\\" height=\\\"',\\n        utils.uint2str(_rectangle.height),\\n        '\\\" fill=\\\"',\\n        utils.getHslString(_rectangle.color),\\n        '\\\">',\\n        animations,\\n        \\\"</rect>\\\"\\n      );\\n  }\\n\\n  function linearGradient(string memory _stop1Color, string memory _stop2Color) internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<linearGradient id=\\\"gradient\\\">',\\n        '<stop offset=\\\"0%\\\" stop-color=\\\"',\\n        _stop1Color,\\n        '\\\"/>',\\n        '<stop offset=\\\"100%\\\" stop-color=\\\"',\\n        _stop2Color,\\n        '\\\"/>',\\n        \\\"</linearGradient>\\\"\\n      );\\n  }\\n\\n  function getKaleidoscopeSVG(Kaleidoscope memory _kaleidoscope, ColorPalette memory _palette)\\n    public\\n    pure\\n    returns (string memory)\\n  {\\n    // Get outer artifacts\\n    string memory outerArtifacts = \\\"\\\";\\n    for (uint256 i = 0; i < _kaleidoscope.numOutsideArtifacts; i++) {\\n      // Rectangle\\n      AnimatedRectangle memory rectangle = rectangleAtIndexForKaleidescope(_kaleidoscope, _palette, i);\\n      outerArtifacts = string.concat(outerArtifacts, getRectangleSVG(rectangle));\\n    }\\n\\n    string memory innerArtifacts = \\\"\\\";\\n    for (uint256 i = 0; i < _kaleidoscope.numInsideArtifacts; i++) {\\n      AnimatedCircle memory circle = circleAtIndexForKaleidescope(_kaleidoscope, _palette, i);\\n      innerArtifacts = string.concat(innerArtifacts, getCircleSVG(circle));\\n    }\\n\\n    string memory paths = \\\"\\\";\\n    uint256 angleInterval = (360 * 10**7) / _kaleidoscope.repetitions;\\n    for (uint256 i = 0; i < _kaleidoscope.repetitions; i++) {\\n      paths = string.concat(\\n        paths,\\n        '<use href=\\\"#tile\\\" transform=\\\"rotate(',\\n        utils.uint2floatstr(angleInterval * i, PRECISION_DEGREE),\\n        \\\",\\\",\\n        utils.uint2floatstr(_kaleidoscope.centerX_precise, PRECISION_DEGREE),\\n        \\\",\\\",\\n        utils.uint2floatstr(_kaleidoscope.centerY_precise, PRECISION_DEGREE),\\n        ')\\\" />'\\n      );\\n    }\\n\\n    string memory clipPath = string.concat(\\n      '<clipPath id=\\\"clip\\\">',\\n      '<path d=\\\"M0,0L',\\n      utils.uint2floatstr(_kaleidoscope.centerX_precise, PRECISION_DEGREE),\\n      \\\",\\\",\\n      utils.uint2floatstr(_kaleidoscope.centerY_precise, PRECISION_DEGREE),\\n      \\\"L\\\",\\n      utils.uint2floatstr(_kaleidoscope.centerX_precise * 2, PRECISION_DEGREE),\\n      \\\",0A\\\",\\n      utils.uint2str(RADIUS),\\n      \\\",\\\",\\n      utils.uint2str(RADIUS),\\n      ',0,0,0,0,0Z\\\" />',\\n      \\\"</clipPath>\\\"\\n    );\\n\\n    string memory svg = string.concat(\\n      '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 ',\\n      utils.uint2str(SIZE),\\n      \\\" \\\",\\n      utils.uint2str(SIZE),\\n      '\\\" width=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\"><defs>',\\n      linearGradient(utils.getHslString(_palette.primaryColorHsl), utils.getHslString(_palette.darkerSecondaryHsl)),\\n      clipPath,\\n      '<g id=\\\"tile\\\" clip-path=\\\"url(#clip)\\\">',\\n      '<rect x=\\\"0\\\" y=\\\"-',\\n      utils.uint2str(RADIUS),\\n      '\\\" width=\\\"',\\n      utils.uint2str(RADIUS * 2),\\n      '\\\" height=\\\"',\\n      utils.uint2str(RADIUS * 2),\\n      '\\\" fill=\\\"'\\n    );\\n\\n    svg = string.concat(\\n      svg,\\n      _kaleidoscope.hasGradient ? \\\"url(#gradient)\\\" : utils.getHslString(_palette.primaryColorHsl),\\n      '\\\"></rect>',\\n      outerArtifacts,\\n      innerArtifacts,\\n      \\\"</g>\\\"\\n    );\\n\\n    svg = string.concat(\\n      svg,\\n      \\\"</defs>\\\",\\n      '<rect width=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" fill=\\\"',\\n      utils.getHslString(_palette.backgroundColorHsl),\\n      '\\\"></rect>',\\n      '<g id=\\\"kaleidoscopeTile\\\" transform=\\\"translate(',\\n      utils.uint2str(SIZE / 2 - _kaleidoscope.centerX_precise / PRECISION)\\n      // \\\"0\\\"\\n    );\\n\\n    svg = string.concat(\\n      svg,\\n      \\\",\\\",\\n      utils.uint2str(SIZE / 2 - _kaleidoscope.centerY_precise / PRECISION),\\n      // \\\"0\\\",\\n      ')\\\">',\\n      '<circle cx=\\\"',\\n      utils.uint2floatstr(_kaleidoscope.centerX_precise, PRECISION_DEGREE),\\n      '\\\" cy=\\\"',\\n      utils.uint2floatstr(_kaleidoscope.centerY_precise, PRECISION_DEGREE),\\n      '\\\" r=\\\"',\\n      utils.uint2str(RADIUS),\\n      '\\\" fill=\\\"',\\n      utils.getHslString(_palette.primaryColorHsl),\\n      '\\\" />',\\n      paths,\\n      \\\"</g>\\\",\\n      \\\"</svg>\\\"\\n    );\\n\\n    return svg;\\n  }\\n\\n  function render(uint256 _tokenId) public pure returns (string memory) {\\n    Kaleidoscope memory kaleidoscope = kaleidoscopeForTokenId(_tokenId);\\n    ColorPalette memory palette = colorPaletteForKaleidescope(kaleidoscope);\\n    string memory svg = getKaleidoscopeSVG(kaleidoscope, palette);\\n\\n    return svg;\\n  }\\n\\n  function metadata(uint256 _tokenId) public pure returns (Kaleidoscope memory) {\\n    Kaleidoscope memory kaleidoscope = kaleidoscopeForTokenId(_tokenId);\\n    return kaleidoscope;\\n  }\\n}\\n\",\"keccak256\":\"0x5cfc21c509722070b9d4cf3d2aa609ac3e7bffd696f301c416eec4678783eef9\",\"license\":\"MIT\"},\"contracts/Trigonometry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/**\\n * @notice Solidity library offering basic trigonometry functions where inputs and outputs are\\n * integers. Inputs are specified in radians scaled by 1e18, and similarly outputs are scaled by 1e18.\\n *\\n * This implementation is based off the Solidity trigonometry library written by Lefteris Karapetsas\\n * which can be found here: https://github.com/Sikorkaio/sikorka/blob/e75c91925c914beaedf4841c0336a806f2b5f66d/contracts/trigonometry.sol\\n *\\n * Compared to Lefteris' implementation, this version makes the following changes:\\n *   - Uses a 32 bits instead of 16 bits for improved accuracy\\n *   - Updated for Solidity 0.8.x\\n *   - Various gas optimizations\\n *   - Change inputs/outputs to standard trig format (scaled by 1e18) instead of requiring the\\n *     integer format used by the algorithm\\n *\\n * Lefertis' implementation is based off Dave Dribin's trigint C library\\n *     http://www.dribin.org/dave/trigint/\\n *\\n * Which in turn is based from a now deleted article which can be found in the Wayback Machine:\\n *     http://web.archive.org/web/20120301144605/http://www.dattalo.com/technical/software/pic/picsine.html\\n */\\nlibrary Trigonometry {\\n  // Table index into the trigonometric table\\n  uint256 constant INDEX_WIDTH = 8;\\n  // Interpolation between successive entries in the table\\n  uint256 constant INTERP_WIDTH = 16;\\n  uint256 constant INDEX_OFFSET = 28 - INDEX_WIDTH;\\n  uint256 constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\n  uint32 constant ANGLES_IN_CYCLE = 1073741824;\\n  uint32 constant QUADRANT_HIGH_MASK = 536870912;\\n  uint32 constant QUADRANT_LOW_MASK = 268435456;\\n  uint256 constant SINE_TABLE_SIZE = 256;\\n\\n  // Pi as an 18 decimal value, which is plenty of accuracy: \\\"For JPL's highest accuracy calculations, which are for\\n  // interplanetary navigation, we use 3.141592653589793: https://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/\\n  uint256 constant PI = 3141592653589793238;\\n  uint256 constant TWO_PI = 2 * PI;\\n  uint256 constant PI_OVER_TWO = PI / 2;\\n\\n  // The constant sine lookup table was generated by generate_trigonometry.py. We must use a constant\\n  // bytes array because constant arrays are not supported in Solidity. Each entry in the lookup\\n  // table is 4 bytes. Since we're using 32-bit parameters for the lookup table, we get a table size\\n  // of 2^(32/4) + 1 = 257, where the first and last entries are equivalent (hence the table size of\\n  // 256 defined above)\\n  uint8 constant entry_bytes = 4; // each entry in the lookup table is 4 bytes\\n  uint256 constant entry_mask = ((1 << (8 * entry_bytes)) - 1); // mask used to cast bytes32 -> lookup table entry\\n  bytes constant sin_table =\\n    hex\\\"00_00_00_00_00_c9_0f_88_01_92_1d_20_02_5b_26_d7_03_24_2a_bf_03_ed_26_e6_04_b6_19_5d_05_7f_00_35_06_47_d9_7c_07_10_a3_45_07_d9_5b_9e_08_a2_00_9a_09_6a_90_49_0a_33_08_bc_0a_fb_68_05_0b_c3_ac_35_0c_8b_d3_5e_0d_53_db_92_0e_1b_c2_e4_0e_e3_87_66_0f_ab_27_2b_10_72_a0_48_11_39_f0_cf_12_01_16_d5_12_c8_10_6e_13_8e_db_b1_14_55_76_b1_15_1b_df_85_15_e2_14_44_16_a8_13_05_17_6d_d9_de_18_33_66_e8_18_f8_b8_3c_19_bd_cb_f3_1a_82_a0_25_1b_47_32_ef_1c_0b_82_6a_1c_cf_8c_b3_1d_93_4f_e5_1e_56_ca_1e_1f_19_f9_7b_1f_dc_dc_1b_20_9f_70_1c_21_61_b3_9f_22_23_a4_c5_22_e5_41_af_23_a6_88_7e_24_67_77_57_25_28_0c_5d_25_e8_45_b6_26_a8_21_85_27_67_9d_f4_28_26_b9_28_28_e5_71_4a_29_a3_c4_85_2a_61_b1_01_2b_1f_34_eb_2b_dc_4e_6f_2c_98_fb_ba_2d_55_3a_fb_2e_11_0a_62_2e_cc_68_1e_2f_87_52_62_30_41_c7_60_30_fb_c5_4d_31_b5_4a_5d_32_6e_54_c7_33_26_e2_c2_33_de_f2_87_34_96_82_4f_35_4d_90_56_36_04_1a_d9_36_ba_20_13_37_6f_9e_46_38_24_93_b0_38_d8_fe_93_39_8c_dd_32_3a_40_2d_d1_3a_f2_ee_b7_3b_a5_1e_29_3c_56_ba_70_3d_07_c1_d5_3d_b8_32_a5_3e_68_0b_2c_3f_17_49_b7_3f_c5_ec_97_40_73_f2_1d_41_21_58_9a_41_ce_1e_64_42_7a_41_d0_43_25_c1_35_43_d0_9a_ec_44_7a_cd_50_45_24_56_bc_45_cd_35_8f_46_75_68_27_47_1c_ec_e6_47_c3_c2_2e_48_69_e6_64_49_0f_57_ee_49_b4_15_33_4a_58_1c_9d_4a_fb_6c_97_4b_9e_03_8f_4c_3f_df_f3_4c_e1_00_34_4d_81_62_c3_4e_21_06_17_4e_bf_e8_a4_4f_5e_08_e2_4f_fb_65_4c_50_97_fc_5e_51_33_cc_94_51_ce_d4_6e_52_69_12_6e_53_02_85_17_53_9b_2a_ef_54_33_02_7d_54_ca_0a_4a_55_60_40_e2_55_f5_a4_d2_56_8a_34_a9_57_1d_ee_f9_57_b0_d2_55_58_42_dd_54_58_d4_0e_8c_59_64_64_97_59_f3_de_12_5a_82_79_99_5b_10_35_ce_5b_9d_11_53_5c_29_0a_cc_5c_b4_20_df_5d_3e_52_36_5d_c7_9d_7b_5e_50_01_5d_5e_d7_7c_89_5f_5e_0d_b2_5f_e3_b3_8d_60_68_6c_ce_60_ec_38_2f_61_6f_14_6b_61_f1_00_3e_62_71_fa_68_62_f2_01_ac_63_71_14_cc_63_ef_32_8f_64_6c_59_bf_64_e8_89_25_65_63_bf_91_65_dd_fb_d2_66_57_3c_bb_66_cf_81_1f_67_46_c7_d7_67_bd_0f_bc_68_32_57_aa_68_a6_9e_80_69_19_e3_1f_69_8c_24_6b_69_fd_61_4a_6a_6d_98_a3_6a_dc_c9_64_6b_4a_f2_78_6b_b8_12_d0_6c_24_29_5f_6c_8f_35_1b_6c_f9_34_fb_6d_62_27_f9_6d_ca_0d_14_6e_30_e3_49_6e_96_a9_9c_6e_fb_5f_11_6f_5f_02_b1_6f_c1_93_84_70_23_10_99_70_83_78_fe_70_e2_cb_c5_71_41_08_04_71_9e_2c_d1_71_fa_39_48_72_55_2c_84_72_af_05_a6_73_07_c3_cf_73_5f_66_25_73_b5_eb_d0_74_0b_53_fa_74_5f_9d_d0_74_b2_c8_83_75_04_d3_44_75_55_bd_4b_75_a5_85_ce_75_f4_2c_0a_76_41_af_3c_76_8e_0e_a5_76_d9_49_88_77_23_5f_2c_77_6c_4e_da_77_b4_17_df_77_fa_b9_88_78_40_33_28_78_84_84_13_78_c7_ab_a1_79_09_a9_2c_79_4a_7c_11_79_8a_23_b0_79_c8_9f_6d_7a_05_ee_ac_7a_42_10_d8_7a_7d_05_5a_7a_b6_cb_a3_7a_ef_63_23_7b_26_cb_4e_7b_5d_03_9d_7b_92_0b_88_7b_c5_e2_8f_7b_f8_88_2f_7c_29_fb_ed_7c_5a_3d_4f_7c_89_4b_dd_7c_b7_27_23_7c_e3_ce_b1_7d_0f_42_17_7d_39_80_eb_7d_62_8a_c5_7d_8a_5f_3f_7d_b0_fd_f7_7d_d6_66_8e_7d_fa_98_a7_7e_1d_93_e9_7e_3f_57_fe_7e_5f_e4_92_7e_7f_39_56_7e_9d_55_fb_7e_ba_3a_38_7e_d5_e5_c5_7e_f0_58_5f_7f_09_91_c3_7f_21_91_b3_7f_38_57_f5_7f_4d_e4_50_7f_62_36_8e_7f_75_4e_7f_7f_87_2b_f2_7f_97_ce_bc_7f_a7_36_b3_7f_b5_63_b2_7f_c2_55_95_7f_ce_0c_3d_7f_d8_87_8d_7f_e1_c7_6a_7f_e9_cb_bf_7f_f0_94_77_7f_f6_21_81_7f_fa_72_d0_7f_fd_88_59_7f_ff_62_15_7f_ff_ff_ff\\\";\\n\\n  /**\\n   * @notice Return the sine of a value, specified in radians scaled by 1e18\\n   * @dev This algorithm for converting sine only uses integer values, and it works by dividing the\\n   * circle into 30 bit angles, i.e. there are 1,073,741,824 (2^30) angle units, instead of the\\n   * standard 360 degrees (2pi radians). From there, we get an output in range -2,147,483,647 to\\n   * 2,147,483,647, (which is the max value of an int32) which is then converted back to the standard\\n   * range of -1 to 1, again scaled by 1e18\\n   * @param _angle Angle to convert\\n   * @return Result scaled by 1e18\\n   */\\n  function sin(uint256 _angle) internal pure returns (int256) {\\n    unchecked {\\n      // Convert angle from from arbitrary radian value (range of 0 to 2pi) to the algorithm's range\\n      // of 0 to 1,073,741,824\\n      _angle = (ANGLES_IN_CYCLE * (_angle % TWO_PI)) / TWO_PI;\\n\\n      // Apply a mask on an integer to extract a certain number of bits, where angle is the integer\\n      // whose bits we want to get, the width is the width of the bits (in bits) we want to extract,\\n      // and the offset is the offset of the bits (in bits) we want to extract. The result is an\\n      // integer containing _width bits of _value starting at the offset bit\\n      uint256 interp = (_angle >> INTERP_OFFSET) & ((1 << INTERP_WIDTH) - 1);\\n      uint256 index = (_angle >> INDEX_OFFSET) & ((1 << INDEX_WIDTH) - 1);\\n\\n      // The lookup table only contains data for one quadrant (since sin is symmetric around both\\n      // axes), so here we figure out which quadrant we're in, then we lookup the values in the\\n      // table then modify values accordingly\\n      bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\n      bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\n\\n      if (!is_odd_quadrant) {\\n        index = SINE_TABLE_SIZE - 1 - index;\\n      }\\n\\n      bytes memory table = sin_table;\\n      // We are looking for two consecutive indices in our lookup table\\n      // Since EVM is left aligned, to read n bytes of data from idx i, we must read from `i * data_len` + `n`\\n      // therefore, to read two entries of size entry_bytes `index * entry_bytes` + `entry_bytes * 2`\\n      uint256 offset1_2 = (index + 2) * entry_bytes;\\n\\n      // This following snippet will function for any entry_bytes <= 15\\n      uint256 x1_2;\\n      assembly {\\n        // mload will grab one word worth of bytes (32), as that is the minimum size in EVM\\n        x1_2 := mload(add(table, offset1_2))\\n      }\\n\\n      // We now read the last two numbers of size entry_bytes from x1_2\\n      // in example: entry_bytes = 4; x1_2 = 0x00...12345678abcdefgh\\n      // therefore: entry_mask = 0xFFFFFFFF\\n\\n      // 0x00...12345678abcdefgh >> 8*4 = 0x00...12345678\\n      // 0x00...12345678 & 0xFFFFFFFF = 0x12345678\\n      uint256 x1 = (x1_2 >> (8 * entry_bytes)) & entry_mask;\\n      // 0x00...12345678abcdefgh & 0xFFFFFFFF = 0xabcdefgh\\n      uint256 x2 = x1_2 & entry_mask;\\n\\n      // Approximate angle by interpolating in the table, accounting for the quadrant\\n      uint256 approximation = ((x2 - x1) * interp) >> INTERP_WIDTH;\\n      int256 sine = is_odd_quadrant ? int256(x1) + int256(approximation) : int256(x2) - int256(approximation);\\n      if (is_negative_quadrant) {\\n        sine *= -1;\\n      }\\n\\n      // Bring result from the range of -2,147,483,647 through 2,147,483,647 to -1e18 through 1e18.\\n      // This can never overflow because sine is bounded by the above values\\n      return (sine * 1e18) / 2_147_483_647;\\n    }\\n  }\\n\\n  /**\\n   * @notice Return the cosine of a value, specified in radians scaled by 1e18\\n   * @dev This is identical to the sin() method, and just computes the value by delegating to the\\n   * sin() method using the identity cos(x) = sin(x + pi/2)\\n   * @dev Overflow when `angle + PI_OVER_TWO > type(uint256).max` is ok, results are still accurate\\n   * @param _angle Angle to convert\\n   * @return Result scaled by 1e18\\n   */\\n  function cos(uint256 _angle) internal pure returns (int256) {\\n    unchecked {\\n      return sin(_angle + PI_OVER_TWO);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6efee204682c447c9b90e2acf39b6e28286c8e64db156aa1d5d51965eeac248b\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n  struct HSL {\\n    uint256 h;\\n    uint256 s;\\n    uint256 l;\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(int256 a, int256 b) internal pure returns (int256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (int256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function generateColors(uint256 _hue, uint256 _numColors) public pure returns (HSL[] memory) {\\n    HSL[] memory colors = new HSL[](_numColors);\\n\\n    for (uint256 i = 0; i < _numColors; i++) {\\n      colors[i] = HSL(_hue, 100 - ((i * 50) / _numColors), 70 - ((i * 30) / _numColors));\\n    }\\n\\n    return colors;\\n  }\\n\\n  function getHueName(uint256 _hue) public pure returns (string memory) {\\n    _hue = _hue % 360;\\n\\n    string[12] memory colors = [\\n      \\\"Red\\\",\\n      \\\"Orange\\\",\\n      \\\"Yellow\\\",\\n      \\\"Chartreuse\\\",\\n      \\\"Green\\\",\\n      \\\"Spring green\\\",\\n      \\\"Turquoise\\\",\\n      \\\"Teal\\\",\\n      \\\"Blue\\\",\\n      \\\"Violet\\\",\\n      \\\"Magenta\\\",\\n      \\\"Rose\\\"\\n    ];\\n\\n    uint256 colorIndex = (_hue / 30) % colors.length;\\n    return colors[colorIndex];\\n  }\\n\\n  function getHslString(HSL memory _hsl) public pure returns (string memory) {\\n    return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl.h), \\\",\\\", uint2str(_hsl.s), \\\"%,\\\", uint2str(_hsl.l), \\\"%)\\\"));\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10**_decimals)), \\\".\\\", uint2str(_i_scaled % (10**_decimals)));\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0xffab6acdddf3942242048fbba2d29c606f47bafec6b47c8c5289b2d0f932c8dd\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614c45806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063aa9e7e7511610066578063aa9e7e7514610158578063c321118c14610188578063d6cf5f55146101b8578063d83e56cb146101e8578063e3684e391461021857610093565b8063016185951461009857806305dfc2e5146100c85780631ac48ab1146100f85780631ca8a85114610128575b600080fd5b6100b260048036038101906100ad9190612206565b610248565b6040516100bf9190612399565b60405180910390f35b6100e260048036038101906100dd91906123b5565b61061c565b6040516100ef919061254d565b60405180910390f35b610112600480360381019061010d919061267b565b6108a8565b60405161011f9190612728565b60405180910390f35b610142600480360381019061013d919061274a565b610b2c565b60405161014f9190612728565b60405180910390f35b610172600480360381019061016d9190612849565b6111cf565b60405161017f9190612728565b60405180910390f35b6101a2600480360381019061019d9190612877565b6112f1565b6040516101af9190612728565b60405180910390f35b6101d260048036038101906101cd9190612877565b611326565b6040516101df9190612955565b60405180910390f35b61020260048036038101906101fd9190612206565b61159d565b60405161020f91906129ed565b60405180910390f35b610232600480360381019061022d9190612877565b611789565b60405161023f9190612955565b60405180910390f35b610250611c98565b6000600860c86102609190612a67565b6007600a61026e9190612bcb565b8660a0015161027d9190612a67565b6102879190612c16565b90506102c1856000015161029a856117a7565b6040516020016102aa9190612cac565b60405160208183030381529060405260148461192f565b82602001818152505061030285600001516102db856117a7565b6040516020016102eb9190612cf8565b60405160208183030381529060405260148461192f565b826060018181525050610344856000015161031c856117a7565b60405160200161032c9190612d44565b6040516020818303038152906040526000600361192f565b8260c0018181525050816060015182602001511380156103745750600060028360c001516103729190612d6a565b145b1561039c57600082602001519050826060015183602001818152505080836060018181525050505b600085608001516103e88760a001516103b59190612d9b565b6103bf9190612a67565b9050600060026007600a6103d39190612bcb565b88608001516103e29190612a67565b6103ec9190612d9b565b90506104396103e8846103e887602001516104079190612d9b565b6104119190612a67565b6103e861041e9190612df5565b836104299190612d9b565b6104339190612a67565b8261199f565b84608001818152505061048d6103e8846103e8876060015161045b9190612d9b565b6104659190612a67565b6103e86104729190612df5565b8361047d9190612d9b565b6104879190612a67565b8261199f565b8460a00181815250506000826103e886602001516104ab9190612e29565b6104b59190612f40565b9050600285608001516104c89190612e29565b816104d39190612faa565b8560000181815250506000836103e887606001516104f19190612e29565b6104fb9190612f40565b905060028660a0015161050e9190612e29565b816007600a61051d9190612bcb565b8b6080015161052c9190612a67565b60026105389190612e29565b6105429190612faa565b61054c9190612fed565b86604001818152505061058e8960000151610566896117a7565b6040516020016105769190613057565b6040516020818303038152906040526003600761192f565b8660e001818152505060006002886105a69190612d6a565b146105db578760e001516001886105bd9190612c16565b815181106105ce576105cd61307d565b5b6020026020010151610607565b8760c001516001886105ed9190612c16565b815181106105fe576105fd61307d565b5b60200260200101515b86610100018190525050505050509392505050565b610624611cea565b61066c82600001516040518060400160405280600a81526020017f7072696d61727948756500000000000000000000000000000000000000000000815250600061016861192f565b8160000181815250508160e001516106885780600001516106a7565b61016860f0826000015161069c9190612c16565b6106a69190612d6a565b5b81602001818152505060405180606001604052808260000151815260200160648152602001601e8152508160400181905250604051806060016040528082602001518152602001606481526020016046815250816060018190525060405180606001604052808260000151815260200160648152602001600a81525081608001819052506040518060600160405280610168600a846000015161074a9190612c16565b6107549190612d6a565b815260200160648152602001600a8152508160a00181905250738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f635c1b88f982600001516001856040015161079d9190612c16565b6040518363ffffffff1660e01b81526004016107ba9291906130bb565b600060405180830381865af41580156107d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061080091906131f4565b8160c00181905250738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f635c1b88f98260200151600185604001516108389190612c16565b6040518363ffffffff1660e01b81526004016108559291906130bb565b600060405180830381865af4158015610872573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061089b91906131f4565b8160e00181905250919050565b606060006108b983608001516117a7565b6108c68460a001516117a7565b6108d385608001516117a7565b6108e08660a001516117a7565b6108f960028860e001516108f49190612d9b565b6117a7565b60405160200161090d959493929190613321565b60405160208183030381529060405290508061092c84602001516119b8565b61093985606001516119b8565b61094686602001516119b8565b61095387606001516119b8565b61096c60028960e001516109679190612d9b565b6117a7565b60405160200161098196959493929190613434565b6040516020818303038152906040529050806109a084600001516119b8565b6109ad85604001516119b8565b6109ba86600001516119b8565b6109c787604001516119b8565b6109e060028960e001516109db9190612d9b565b6117a7565b6040516020016109f596959493929190613554565b6040516020818303038152906040529050610a2e600284604001518560000151610a1f9190612fed565b610a299190612f40565b6119b8565b610a56600285606001518660200151610a479190612fed565b610a519190612f40565b6119b8565b610a7e60028660a001518760800151610a6f9190612c16565b610a799190612a67565b6117a7565b738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f636e6472588761010001516040518263ffffffff1660e01b8152600401610aba9190613653565b600060405180830381865af4158015610ad7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b009190613714565b84604051602001610b15959493929190613841565b604051602081830303815290604052915050919050565b6060600060405180602001604052806000815250905060005b8460600151811015610ba0576000610b5e86868461159d565b905082610b6a826111cf565b604051602001610b7b9291906138e6565b6040516020818303038152906040529250508080610b989061390a565b915050610b45565b50600060405180602001604052806000815250905060005b8560400151811015610c13576000610bd1878784610248565b905082610bdd826108a8565b604051602001610bee9291906138e6565b6040516020818303038152906040529250508080610c0b9061390a565b915050610bb8565b5060006040518060200160405280600081525090506000866020015163d693a400610c3e9190612a67565b905060005b8760200151811015610cbb5782610c668284610c5f9190612d9b565b6007611a0c565b610c758a608001516007611a0c565b610c848b60a001516007611a0c565b604051602001610c979493929190613a10565b60405160208183030381529060405292508080610cb39061390a565b915050610c43565b506000610ccd88608001516007611a0c565b610cdc8960a001516007611a0c565b610cf760028b60800151610cf09190612d9b565b6007611a0c565b610d0160c86117a7565b610d0b60c86117a7565b604051602001610d1f959493929190613b6a565b60405160208183030381529060405290506000610d3d6101f46117a7565b610d486101f46117a7565b610d536101f46117a7565b610d5e6101f46117a7565b610e68738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f636e6472588e604001516040518263ffffffff1660e01b8152600401610d9c9190613653565b600060405180830381865af4158015610db9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610de29190613714565b738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f636e6472588f60a001516040518263ffffffff1660e01b8152600401610e1d9190613653565b600060405180830381865af4158015610e3a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e639190613714565b611a76565b86610e7360c86117a7565b610e89600260c8610e849190612d9b565b6117a7565b610e9f600260c8610e9a9190612d9b565b6117a7565b604051602001610eb799989796959493929190613dcf565b6040516020818303038152906040529050808960c00151610f5857738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f636e6472588a604001516040518263ffffffff1660e01b8152600401610f0d9190613653565b600060405180830381865af4158015610f2a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f539190613714565b610f8f565b6040518060400160405280600e81526020017f75726c28236772616469656e74290000000000000000000000000000000000008152505b8787604051602001610fa49493929190613f28565b604051602081830303815290604052905080610fc16101f46117a7565b610fcc6101f46117a7565b738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f636e6472588c608001516040518263ffffffff1660e01b81526004016110079190613653565b600060405180830381865af4158015611024573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061104d9190613714565b61108b6007600a61105e9190612bcb565b8e6080015161106d9190612a67565b60026101f461107c9190612a67565b6110869190612df5565b6117a7565b60405160200161109f959493929190614042565b6040516020818303038152906040529050806110ef6007600a6110c29190612bcb565b8b60a001516110d19190612a67565b60026101f46110e09190612a67565b6110ea9190612df5565b6117a7565b6110fe8b608001516007611a0c565b61110d8c60a001516007611a0c565b61111760c86117a7565b738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f636e6472588e604001516040518263ffffffff1660e01b81526004016111529190613653565b600060405180830381865af415801561116f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111989190613714565b896040516020016111af9796959493929190614155565b604051602081830303815290604052905080965050505050505092915050565b606060006111e083606001516117a7565b6111ed84606001516117a7565b6111fa85608001516117a7565b60405160200161120c9392919061434b565b604051602081830303815290604052905061122a83606001516117a7565b61123784600001516117a7565b61124485602001516117a7565b738C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f636e6472588760a001516040518263ffffffff1660e01b815260040161127f9190613653565b600060405180830381865af415801561129c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112c59190613714565b846040516020016112da959493929190614400565b604051602081830303815290604052915050919050565b606060006112fe83611326565b9050600061130b8261061c565b905060006113198383610b2c565b9050809350505050919050565b61132e611d47565b8181600001818152505061137b826040518060400160405280600b81526020017f72657065746974696f6e730000000000000000000000000000000000000000008152506003601461192f565b8160200181815250506113c7826040518060400160405280601281526020017f6e756d496e7369646541727469666163747300000000000000000000000000008152506003600a61192f565b816040018181525050611413826040518060400160405280601381526020017f6e756d4f757473696465417274696661637473000000000000000000000000008152506001600461192f565b8160600181815250506005611461836040518060400160405280600b81526020017f6861734772616469656e740000000000000000000000000000000000000000008152506001600a61192f565b148160c001901515908115158152505060086114b6836040518060400160405280600e81526020017f7365636f6e64617279436f6c6f720000000000000000000000000000000000008152506001600861192f565b148160e0019015159081151581525050600060b4672b992ddfa23249d6600284602001516101686114e79190612a67565b60b46114f39190612df5565b6114fd9190612a67565b6115079190612d9b565b6115119190612a67565b9050600760126115219190612df5565b600a61152d9190612bcb565b61153682611aa2565b60c86115429190612e29565b61154c9190612f40565b826080018181525050600760126115639190612df5565b600a61156f9190612bcb565b61157882611acf565b60c86115849190612e29565b61158e9190612f40565b8260a001818152505050919050565b6115a5611d90565b61162084600001516115b6846117a7565b6040516020016115c691906144cb565b60405160208183030381529060405260026007600a6115e59190612bcb565b8860a001516115f49190612a67565b6115fe9190612a67565b6007600a61160c9190612bcb565b8860a0015161161b9190612a67565b61192f565b8160000181815250506116a4846000015161163a846117a7565b60405160200161164a9190614517565b6040516020818303038152906040526007600a6116679190612bcb565b8760a001516116769190612a67565b600860c86116849190612a67565b60028960a001516116959190612d9b565b61169f9190612c16565b61192f565b81602001818152505060008160400181815250506007600a6116c69190612bcb565b8460a001516116d59190612a67565b81606001818152505061171784600001516116ef846117a7565b6040516020016116ff9190614563565b6040516020818303038152906040526005600a61192f565b816080018181525050600060028361172f9190612d6a565b14611759578260e0015160008151811061174c5761174b61307d565b5b602002602001015161177a565b8260c001516000815181106117715761177061307d565b5b60200260200101515b8160a001819052509392505050565b611791611d47565b600061179c83611326565b905080915050919050565b6060600082036117ee576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061192a565b600082905060005b600082146118205780806118099061390a565b915050600a826118199190612a67565b91506117f6565b60008167ffffffffffffffff81111561183c5761183b611e17565b5b6040519080825280601f01601f19166020018201604052801561186e5781602001600182028036833780820191505090505b50905060008290505b600086146119225760018161188c9190612df5565b90506000600a808861189e9190612a67565b6118a89190612d9b565b876118b39190612df5565b60306118bf9190614596565b905060008160f81b9050808484815181106118dd576118dc61307d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886119199190612a67565b97505050611877565b819450505050505b919050565b6000806119648561193f886117a7565b6040516020016119509291906138e6565b604051602081830303815290604052611c65565b905083600185856119759190612df5565b61197f9190612c16565b8261198a9190612d6a565b6119949190612c16565b915050949350505050565b60008183106119ae57816119b0565b825b905092915050565b606060008212156119fb576119d5826119d0906145cb565b6117a7565b6040516020016119e59190614639565b6040516020818303038152906040529050611a07565b611a04826117a7565b90505b919050565b6060611a2e82600a611a1e9190612bcb565b84611a299190612a67565b6117a7565b611a4e83600a611a3e9190612bcb565b85611a499190612d6a565b6117a7565b604051602001611a5f929190614685565b604051602081830303815290604052905092915050565b60608282604051602001611a8b929190614776565b604051602081830303815290604052905092915050565b6000611ac86002672b992ddfa23249d681611ac057611abf612a09565b5b048301611acf565b9050919050565b6000672b992ddfa23249d6600202672b992ddfa23249d66002028381611af857611af7612a09565b5b06634000000063ffffffff160281611b1357611b12612a09565b5b0491506000600160106001901b0360106008601c030384901c1690506000600160086001901b036008601c0385901c169050600080631000000063ffffffff168616149050600080632000000063ffffffff1687161415905081611b7c57826001610100030392505b6000604051806104400160405280610404815260200161480c610404913990506000600460ff1660028601029050600081830151905060006001600460080260ff166001901b03600460080260ff1683901c16905060006001600460080260ff166001901b0383169050600060108a84840302901c9050600088611c0257818303611c06565b8184015b90508715611c34577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810290505b637fffffff670de0b6b3a7640000820281611c5257611c51612a09565b5b059b505050505050505050505050919050565b600081604051602001611c7891906147f4565b6040516020818303038152906040528051906020012060001c9050919050565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611ce4611dcc565b81525090565b6040518061010001604052806000815260200160008152602001611d0c611dcc565b8152602001611d19611dcc565b8152602001611d26611dcc565b8152602001611d33611dcc565b815260200160608152602001606081525090565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001611dc6611dcc565b81525090565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e4f82611e06565b810181811067ffffffffffffffff82111715611e6e57611e6d611e17565b5b80604052505050565b6000611e81611ded565b9050611e8d8282611e46565b919050565b600080fd5b6000819050919050565b611eaa81611e97565b8114611eb557600080fd5b50565b600081359050611ec781611ea1565b92915050565b60008115159050919050565b611ee281611ecd565b8114611eed57600080fd5b50565b600081359050611eff81611ed9565b92915050565b60006101008284031215611f1c57611f1b611e01565b5b611f27610100611e77565b90506000611f3784828501611eb8565b6000830152506020611f4b84828501611eb8565b6020830152506040611f5f84828501611eb8565b6040830152506060611f7384828501611eb8565b6060830152506080611f8784828501611eb8565b60808301525060a0611f9b84828501611eb8565b60a08301525060c0611faf84828501611ef0565b60c08301525060e0611fc384828501611ef0565b60e08301525092915050565b600060608284031215611fe557611fe4611e01565b5b611fef6060611e77565b90506000611fff84828501611eb8565b600083015250602061201384828501611eb8565b602083015250604061202784828501611eb8565b60408301525092915050565b600080fd5b600067ffffffffffffffff82111561205357612052611e17565b5b602082029050602081019050919050565b600080fd5b600061207c61207784612038565b611e77565b9050808382526020820190506060840283018581111561209f5761209e612064565b5b835b818110156120c857806120b48882611fcf565b8452602084019350506060810190506120a1565b5050509392505050565b600082601f8301126120e7576120e6612033565b5b81356120f7848260208601612069565b91505092915050565b6000610200828403121561211757612116611e01565b5b612122610100611e77565b9050600061213284828501611eb8565b600083015250602061214684828501611eb8565b602083015250604061215a84828501611fcf565b60408301525060a061216e84828501611fcf565b60608301525061010061218384828501611fcf565b60808301525061016061219884828501611fcf565b60a0830152506101c082013567ffffffffffffffff8111156121bd576121bc611e92565b5b6121c9848285016120d2565b60c0830152506101e082013567ffffffffffffffff8111156121ee576121ed611e92565b5b6121fa848285016120d2565b60e08301525092915050565b600080600061014084860312156122205761221f611df7565b5b600061222e86828701611f05565b93505061010084013567ffffffffffffffff8111156122505761224f611dfc565b5b61225c86828701612100565b92505061012061226e86828701611eb8565b9150509250925092565b6000819050919050565b61228b81612278565b82525050565b61229a81611e97565b82525050565b6060820160008201516122b66000850182612291565b5060208201516122c96020850182612291565b5060408201516122dc6040850182612291565b50505050565b610160820160008201516122f96000850182612282565b50602082015161230c6020850182612282565b50604082015161231f6040850182612282565b5060608201516123326060850182612282565b5060808201516123456080850182612291565b5060a082015161235860a0850182612291565b5060c082015161236b60c0850182612291565b5060e082015161237e60e0850182612291565b506101008201516123936101008501826122a0565b50505050565b6000610160820190506123af60008301846122e2565b92915050565b600061010082840312156123cc576123cb611df7565b5b60006123da84828501611f05565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061241b83836122a0565b60608301905092915050565b6000602082019050919050565b600061243f826123e3565b61244981856123ee565b9350612454836123ff565b8060005b8381101561248557815161246c888261240f565b975061247783612427565b925050600181019050612458565b5085935050505092915050565b6000610200830160008301516124ab6000860182612291565b5060208301516124be6020860182612291565b5060408301516124d160408601826122a0565b5060608301516124e460a08601826122a0565b5060808301516124f86101008601826122a0565b5060a083015161250c6101608601826122a0565b5060c08301518482036101c08601526125258282612434565b91505060e08301518482036101e08601526125408282612434565b9150508091505092915050565b600060208201905081810360008301526125678184612492565b905092915050565b61257881612278565b811461258357600080fd5b50565b6000813590506125958161256f565b92915050565b600061016082840312156125b2576125b1611e01565b5b6125bd610120611e77565b905060006125cd84828501612586565b60008301525060206125e184828501612586565b60208301525060406125f584828501612586565b604083015250606061260984828501612586565b606083015250608061261d84828501611eb8565b60808301525060a061263184828501611eb8565b60a08301525060c061264584828501611eb8565b60c08301525060e061265984828501611eb8565b60e08301525061010061266e84828501611fcf565b6101008301525092915050565b6000610160828403121561269257612691611df7565b5b60006126a08482850161259b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126e35780820151818401526020810190506126c8565b60008484015250505050565b60006126fa826126a9565b61270481856126b4565b93506127148185602086016126c5565b61271d81611e06565b840191505092915050565b6000602082019050818103600083015261274281846126ef565b905092915050565b600080610120838503121561276257612761611df7565b5b600061277085828601611f05565b92505061010083013567ffffffffffffffff81111561279257612791611dfc565b5b61279e85828601612100565b9150509250929050565b600061010082840312156127bf576127be611e01565b5b6127c960c0611e77565b905060006127d984828501611eb8565b60008301525060206127ed84828501611eb8565b602083015250604061280184828501611eb8565b604083015250606061281584828501611eb8565b606083015250608061282984828501611eb8565b60808301525060a061283d84828501611fcf565b60a08301525092915050565b600061010082840312156128605761285f611df7565b5b600061286e848285016127a8565b91505092915050565b60006020828403121561288d5761288c611df7565b5b600061289b84828501611eb8565b91505092915050565b6128ad81611ecd565b82525050565b610100820160008201516128ca6000850182612291565b5060208201516128dd6020850182612291565b5060408201516128f06040850182612291565b5060608201516129036060850182612291565b5060808201516129166080850182612291565b5060a082015161292960a0850182612291565b5060c082015161293c60c08501826128a4565b5060e082015161294f60e08501826128a4565b50505050565b60006101008201905061296b60008301846128b3565b92915050565b610100820160008201516129886000850182612291565b50602082015161299b6020850182612291565b5060408201516129ae6040850182612291565b5060608201516129c16060850182612291565b5060808201516129d46080850182612291565b5060a08201516129e760a08501826122a0565b50505050565b600061010082019050612a036000830184612971565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a7282611e97565b9150612a7d83611e97565b925082612a8d57612a8c612a09565b5b828204905092915050565b60008160011c9050919050565b6000808291508390505b6001851115612aef57808604811115612acb57612aca612a38565b5b6001851615612ada5780820291505b8081029050612ae885612a98565b9450612aaf565b94509492505050565b600082612b085760019050612bc4565b81612b165760009050612bc4565b8160018114612b2c5760028114612b3657612b65565b6001915050612bc4565b60ff841115612b4857612b47612a38565b5b8360020a915084821115612b5f57612b5e612a38565b5b50612bc4565b5060208310610133831016604e8410600b8410161715612b9a5782820a905083811115612b9557612b94612a38565b5b612bc4565b612ba78484846001612aa5565b92509050818404811115612bbe57612bbd612a38565b5b81810290505b9392505050565b6000612bd682611e97565b9150612be183611e97565b9250612c0e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612af8565b905092915050565b6000612c2182611e97565b9150612c2c83611e97565b9250828201905080821115612c4457612c43612a38565b5b92915050565b7f7931000000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b6000612c86826126a9565b612c908185612c70565b9350612ca08185602086016126c5565b80840191505092915050565b6000612cb782612c4a565b600282019150612cc78284612c7b565b915081905092915050565b7f7932000000000000000000000000000000000000000000000000000000000000815250565b6000612d0382612cd2565b600282019150612d138284612c7b565b915081905092915050565b7f616c7465726e6174696e67436c61737300000000000000000000000000000000815250565b6000612d4f82612d1e565b601082019150612d5f8284612c7b565b915081905092915050565b6000612d7582611e97565b9150612d8083611e97565b925082612d9057612d8f612a09565b5b828206905092915050565b6000612da682611e97565b9150612db183611e97565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612dea57612de9612a38565b5b828202905092915050565b6000612e0082611e97565b9150612e0b83611e97565b9250828203905081811115612e2357612e22612a38565b5b92915050565b6000612e3482612278565b9150612e3f83612278565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612e7e57612e7d612a38565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612ebb57612eba612a38565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612ef857612ef7612a38565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612f3557612f34612a38565b5b828202905092915050565b6000612f4b82612278565b9150612f5683612278565b925082612f6657612f65612a09565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615612f9f57612f9e612a38565b5b828205905092915050565b6000612fb582612278565b9150612fc083612278565b9250828203905081811260008412168282136000851215161715612fe757612fe6612a38565b5b92915050565b6000612ff882612278565b915061300383612278565b92508282019050828112156000831216838212600084121516171561302b5761302a612a38565b5b92915050565b7f6475726174696f6e000000000000000000000000000000000000000000000000815250565b600061306282613031565b6008820191506130728284612c7b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6130b581611e97565b82525050565b60006040820190506130d060008301856130ac565b6130dd60208301846130ac565b9392505050565b6000815190506130f381611ea1565b92915050565b60006060828403121561310f5761310e611e01565b5b6131196060611e77565b90506000613129848285016130e4565b600083015250602061313d848285016130e4565b6020830152506040613151848285016130e4565b60408301525092915050565b600061317061316b84612038565b611e77565b9050808382526020820190506060840283018581111561319357613192612064565b5b835b818110156131bc57806131a888826130f9565b845260208401935050606081019050613195565b5050509392505050565b600082601f8301126131db576131da612033565b5b81516131eb84826020860161315d565b91505092915050565b60006020828403121561320a57613209611df7565b5b600082015167ffffffffffffffff81111561322857613227611dfc565b5b613234848285016131c6565b91505092915050565b7f3c616e696d617465206174747269627574654e616d653d2272222076616c756560008201527f733d220000000000000000000000000000000000000000000000000000000000602082015250565b6000613299602383612c70565b91506132a48261323d565b602382019050919050565b7f3b00000000000000000000000000000000000000000000000000000000000000815250565b7f222063616c634d6f64653d226c696e65617222206475723d2200000000000000815250565b7f732220726570656174436f756e743d22696e646566696e697465222f3e000000815250565b600061332c8261328c565b91506133388288612c7b565b9150613343826132af565b6001820191506133538287612c7b565b915061335e826132af565b60018201915061336e8286612c7b565b9150613379826132af565b6001820191506133898285612c7b565b9150613394826132d5565b6019820191506133a48284612c7b565b91506133af826132fb565b601d820191508190509695505050505050565b7f3c616e696d617465206174747269627574654e616d653d226379222076616c7560008201527f65733d2200000000000000000000000000000000000000000000000000000000602082015250565b600061341e602483612c70565b9150613429826133c2565b602482019050919050565b60006134408289612c7b565b915061344b82613411565b91506134578288612c7b565b9150613462826132af565b6001820191506134728287612c7b565b915061347d826132af565b60018201915061348d8286612c7b565b9150613498826132af565b6001820191506134a88285612c7b565b91506134b3826132d5565b6019820191506134c38284612c7b565b91506134ce826132fb565b601d82019150819050979650505050505050565b7f3c616e696d617465206174747269627574654e616d653d226378222076616c7560008201527f65733d2200000000000000000000000000000000000000000000000000000000602082015250565b600061353e602483612c70565b9150613549826134e2565b602482019050919050565b60006135608289612c7b565b915061356b82613531565b91506135778288612c7b565b9150613582826132af565b6001820191506135928287612c7b565b915061359d826132af565b6001820191506135ad8286612c7b565b91506135b8826132af565b6001820191506135c88285612c7b565b91506135d3826132d5565b6019820191506135e38284612c7b565b91506135ee826132fb565b601d82019150819050979650505050505050565b61360b81611e97565b82525050565b6060820160008201516136276000850182613602565b50602082015161363a6020850182613602565b50604082015161364d6040850182613602565b50505050565b60006060820190506136686000830184613611565b92915050565b600080fd5b600067ffffffffffffffff82111561368e5761368d611e17565b5b61369782611e06565b9050602081019050919050565b60006136b76136b284613673565b611e77565b9050828152602081018484840111156136d3576136d261366e565b5b6136de8482856126c5565b509392505050565b600082601f8301126136fb576136fa612033565b5b815161370b8482602086016136a4565b91505092915050565b60006020828403121561372a57613729611df7565b5b600082015167ffffffffffffffff81111561374857613747611dfc565b5b613754848285016136e6565b91505092915050565b7f3c636972636c652063783d220000000000000000000000000000000000000000815250565b7f222063793d220000000000000000000000000000000000000000000000000000815250565b7f2220723d22000000000000000000000000000000000000000000000000000000815250565b7f222066696c6c3d22000000000000000000000000000000000000000000000000815250565b7f223e000000000000000000000000000000000000000000000000000000000000815250565b7f3c2f636972636c653e0000000000000000000000000000000000000000000000815250565b600061384c8261375d565b600c8201915061385c8288612c7b565b915061386782613783565b6006820191506138778287612c7b565b9150613882826137a9565b6005820191506138928286612c7b565b915061389d826137cf565b6008820191506138ad8285612c7b565b91506138b8826137f5565b6002820191506138c88284612c7b565b91506138d38261381b565b6009820191508190509695505050505050565b60006138f28285612c7b565b91506138fe8284612c7b565b91508190509392505050565b600061391582611e97565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361394757613946612a38565b5b600182019050919050565b7f3c75736520687265663d222374696c6522207472616e73666f726d3d22726f7460008201527f6174652800000000000000000000000000000000000000000000000000000000602082015250565b60006139ae602483612c70565b91506139b982613952565b602482019050919050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b7f2922202f3e000000000000000000000000000000000000000000000000000000815250565b6000613a1c8287612c7b565b9150613a27826139a1565b9150613a338286612c7b565b9150613a3e826139c4565b600182019150613a4e8285612c7b565b9150613a59826139c4565b600182019150613a698284612c7b565b9150613a74826139ea565b60058201915081905095945050505050565b7f3c636c6970506174682069643d22636c6970223e000000000000000000000000815250565b7f3c7061746820643d224d302c304c000000000000000000000000000000000000815250565b7f4c00000000000000000000000000000000000000000000000000000000000000815250565b7f2c30410000000000000000000000000000000000000000000000000000000000815250565b7f2c302c302c302c302c305a22202f3e0000000000000000000000000000000000815250565b7f3c2f636c6970506174683e000000000000000000000000000000000000000000815250565b6000613b7582613a86565b601482019150613b8482613aac565b600e82019150613b948288612c7b565b9150613b9f826139c4565b600182019150613baf8287612c7b565b9150613bba82613ad2565b600182019150613bca8286612c7b565b9150613bd582613af8565b600382019150613be58285612c7b565b9150613bf0826139c4565b600182019150613c008284612c7b565b9150613c0b82613b1e565b600f82019150613c1a82613b44565b600b820191508190509695505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f737667222076696577426f783d22302030200000000000000000000000602082015250565b6000613c89603583612c70565b9150613c9482613c2d565b603582019050919050565b7f2000000000000000000000000000000000000000000000000000000000000000815250565b7f222077696474683d220000000000000000000000000000000000000000000000815250565b7f22206865696768743d2200000000000000000000000000000000000000000000815250565b7f223e3c646566733e000000000000000000000000000000000000000000000000815250565b7f3c672069643d2274696c652220636c69702d706174683d2275726c2823636c6960008201527f7029223e00000000000000000000000000000000000000000000000000000000602082015250565b6000613d93602483612c70565b9150613d9e82613d37565b602482019050919050565b7f3c7265637420783d22302220793d222d00000000000000000000000000000000815250565b6000613dda82613c7c565b9150613de6828c612c7b565b9150613df182613c9f565b600182019150613e01828b612c7b565b9150613e0c82613cc5565b600982019150613e1c828a612c7b565b9150613e2782613ceb565b600a82019150613e378289612c7b565b9150613e4282613d11565b600882019150613e528288612c7b565b9150613e5e8287612c7b565b9150613e6982613d86565b9150613e7482613da9565b601082019150613e848286612c7b565b9150613e8f82613cc5565b600982019150613e9f8285612c7b565b9150613eaa82613ceb565b600a82019150613eba8284612c7b565b9150613ec5826137cf565b6008820191508190509a9950505050505050505050565b7f223e3c2f726563743e0000000000000000000000000000000000000000000000815250565b7f3c2f673e00000000000000000000000000000000000000000000000000000000815250565b6000613f348287612c7b565b9150613f408286612c7b565b9150613f4b82613edc565b600982019150613f5b8285612c7b565b9150613f678284612c7b565b9150613f7282613f02565b60048201915081905095945050505050565b7f3c2f646566733e00000000000000000000000000000000000000000000000000815250565b7f3c726563742077696474683d2200000000000000000000000000000000000000815250565b7f3c672069643d226b616c6569646f73636f706554696c6522207472616e73666f60008201527f726d3d227472616e736c61746528000000000000000000000000000000000000602082015250565b600061402c602e83612c70565b915061403782613fd0565b602e82019050919050565b600061404e8288612c7b565b915061405982613f84565b60078201915061406882613faa565b600d820191506140788287612c7b565b915061408382613ceb565b600a820191506140938286612c7b565b915061409e826137cf565b6008820191506140ae8285612c7b565b91506140b982613edc565b6009820191506140c88261401f565b91506140d48284612c7b565b91508190509695505050505050565b7f29223e0000000000000000000000000000000000000000000000000000000000815250565b7f22202f3e00000000000000000000000000000000000000000000000000000000815250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815250565b6000614161828a612c7b565b915061416c826139c4565b60018201915061417c8289612c7b565b9150614187826140e3565b6003820191506141968261375d565b600c820191506141a68288612c7b565b91506141b182613783565b6006820191506141c18287612c7b565b91506141cc826137a9565b6005820191506141dc8286612c7b565b91506141e7826137cf565b6008820191506141f78285612c7b565b915061420282614109565b6004820191506142128284612c7b565b915061421d82613f02565b60048201915061422c8261412f565b60068201915081905098975050505050505050565b7f3c616e696d6174655472616e73666f726d206174747269627574654e616d653d60008201527f227472616e73666f726d2220747970653d22726f74617465222066726f6d3d2260208201527f302030202d000000000000000000000000000000000000000000000000000000604082015250565b60006142c3604583612c70565b91506142ce82614241565b604582019050919050565b7f2220746f3d222d3336302030202d000000000000000000000000000000000000815250565b7f2220626567696e3d22307322206475723d220000000000000000000000000000815250565b7f732220726570656174436f756e743d22696e646566696e69746522202f3e0000815250565b6000614356826142b6565b91506143628286612c7b565b915061436d826142d9565b600e8201915061437d8285612c7b565b9150614388826142ff565b6012820191506143988284612c7b565b91506143a382614325565b601e82019150819050949350505050565b7f3c726563742072783d2233222072793d22332220783d22302220793d222d0000815250565b7f3c2f726563743e00000000000000000000000000000000000000000000000000815250565b600061440b826143b4565b601e8201915061441b8288612c7b565b915061442682613cc5565b6009820191506144368287612c7b565b915061444182613ceb565b600a820191506144518286612c7b565b915061445c826137cf565b60088201915061446c8285612c7b565b9150614477826137f5565b6002820191506144878284612c7b565b9150614492826143da565b6007820191508190509695505050505050565b7f7265637477696474680000000000000000000000000000000000000000000000815250565b60006144d6826144a5565b6009820191506144e68284612c7b565b915081905092915050565b7f7265637468656967687400000000000000000000000000000000000000000000815250565b6000614522826144f1565b600a820191506145328284612c7b565b915081905092915050565b7f726563746475726174696f6e0000000000000000000000000000000000000000815250565b600061456e8261453d565b600c8201915061457e8284612c7b565b915081905092915050565b600060ff82169050919050565b60006145a182614589565b91506145ac83614589565b9250828201905060ff8111156145c5576145c4612a38565b5b92915050565b60006145d682612278565b91507f8000000000000000000000000000000000000000000000000000000000000000820361460857614607612a38565b5b816000039050919050565b7f2d00000000000000000000000000000000000000000000000000000000000000815250565b600061464482614613565b6001820191506146548284612c7b565b915081905092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000815250565b60006146918285612c7b565b915061469c8261465f565b6001820191506146ac8284612c7b565b91508190509392505050565b7f3c6c696e6561724772616469656e742069643d226772616469656e74223e0000815250565b7f3c73746f70206f66667365743d223025222073746f702d636f6c6f723d220000815250565b7f222f3e0000000000000000000000000000000000000000000000000000000000815250565b7f3c73746f70206f66667365743d2231303025222073746f702d636f6c6f723d22815250565b7f3c2f6c696e6561724772616469656e743e000000000000000000000000000000815250565b6000614781826146b8565b601e82019150614790826146de565b601e820191506147a08285612c7b565b91506147ab82614704565b6003820191506147ba8261472a565b6020820191506147ca8284612c7b565b91506147d582614704565b6003820191506147e482614750565b6011820191508190509392505050565b60006148008284612c7b565b91508190509291505056fe0000000000c90f8801921d20025b26d703242abf03ed26e604b6195d057f00350647d97c0710a34507d95b9e08a2009a096a90490a3308bc0afb68050bc3ac350c8bd35e0d53db920e1bc2e40ee387660fab272b1072a0481139f0cf120116d512c8106e138edbb1145576b1151bdf8515e2144416a81305176dd9de183366e818f8b83c19bdcbf31a82a0251b4732ef1c0b826a1ccf8cb31d934fe51e56ca1e1f19f97b1fdcdc1b209f701c2161b39f2223a4c522e541af23a6887e2467775725280c5d25e845b626a8218527679df42826b92828e5714a29a3c4852a61b1012b1f34eb2bdc4e6f2c98fbba2d553afb2e110a622ecc681e2f8752623041c76030fbc54d31b54a5d326e54c73326e2c233def2873496824f354d905636041ad936ba2013376f9e46382493b038d8fe93398cdd323a402dd13af2eeb73ba51e293c56ba703d07c1d53db832a53e680b2c3f1749b73fc5ec974073f21d4121589a41ce1e64427a41d04325c13543d09aec447acd50452456bc45cd358f46756827471cece647c3c22e4869e664490f57ee49b415334a581c9d4afb6c974b9e038f4c3fdff34ce100344d8162c34e2106174ebfe8a44f5e08e24ffb654c5097fc5e5133cc9451ced46e5269126e53028517539b2aef5433027d54ca0a4a556040e255f5a4d2568a34a9571deef957b0d2555842dd5458d40e8c5964649759f3de125a8279995b1035ce5b9d11535c290acc5cb420df5d3e52365dc79d7b5e50015d5ed77c895f5e0db25fe3b38d60686cce60ec382f616f146b61f1003e6271fa6862f201ac637114cc63ef328f646c59bf64e889256563bf9165ddfbd266573cbb66cf811f6746c7d767bd0fbc683257aa68a69e806919e31f698c246b69fd614a6a6d98a36adcc9646b4af2786bb812d06c24295f6c8f351b6cf934fb6d6227f96dca0d146e30e3496e96a99c6efb5f116f5f02b16fc1938470231099708378fe70e2cbc571410804719e2cd171fa394872552c8472af05a67307c3cf735f662573b5ebd0740b53fa745f9dd074b2c8837504d3447555bd4b75a585ce75f42c0a7641af3c768e0ea576d9498877235f2c776c4eda77b417df77fab988784033287884841378c7aba17909a92c794a7c11798a23b079c89f6d7a05eeac7a4210d87a7d055a7ab6cba37aef63237b26cb4e7b5d039d7b920b887bc5e28f7bf8882f7c29fbed7c5a3d4f7c894bdd7cb727237ce3ceb17d0f42177d3980eb7d628ac57d8a5f3f7db0fdf77dd6668e7dfa98a77e1d93e97e3f57fe7e5fe4927e7f39567e9d55fb7eba3a387ed5e5c57ef0585f7f0991c37f2191b37f3857f57f4de4507f62368e7f754e7f7f872bf27f97cebc7fa736b37fb563b27fc255957fce0c3d7fd8878d7fe1c76a7fe9cbbf7ff094777ff621817ffa72d07ffd88597fff62157fffffffa2646970667358221220b399d3aaecf8e9cff82eb7ffbdd25ae3c348cc1e3152f7b78007e5980a66aace64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063aa9e7e7511610066578063aa9e7e7514610158578063c321118c14610188578063d6cf5f55146101b8578063d83e56cb146101e8578063e3684e391461021857610093565b8063016185951461009857806305dfc2e5146100c85780631ac48ab1146100f85780631ca8a85114610128575b600080fd5b6100b260048036038101906100ad9190612206565b610248565b6040516100bf9190612399565b60405180910390f35b6100e260048036038101906100dd91906123b5565b61061c565b6040516100ef919061254d565b60405180910390f35b610112600480360381019061010d919061267b565b6108a8565b60405161011f9190612728565b60405180910390f35b610142600480360381019061013d919061274a565b610b2c565b60405161014f9190612728565b60405180910390f35b610172600480360381019061016d9190612849565b6111cf565b60405161017f9190612728565b60405180910390f35b6101a2600480360381019061019d9190612877565b6112f1565b6040516101af9190612728565b60405180910390f35b6101d260048036038101906101cd9190612877565b611326565b6040516101df9190612955565b60405180910390f35b61020260048036038101906101fd9190612206565b61159d565b60405161020f91906129ed565b60405180910390f35b610232600480360381019061022d9190612877565b611789565b60405161023f9190612955565b60405180910390f35b610250611c98565b6000600860c86102609190612a67565b6007600a61026e9190612bcb565b8660a0015161027d9190612a67565b6102879190612c16565b90506102c1856000015161029a856117a7565b6040516020016102aa9190612cac565b60405160208183030381529060405260148461192f565b82602001818152505061030285600001516102db856117a7565b6040516020016102eb9190612cf8565b60405160208183030381529060405260148461192f565b826060018181525050610344856000015161031c856117a7565b60405160200161032c9190612d44565b6040516020818303038152906040526000600361192f565b8260c0018181525050816060015182602001511380156103745750600060028360c001516103729190612d6a565b145b1561039c57600082602001519050826060015183602001818152505080836060018181525050505b600085608001516103e88760a001516103b59190612d9b565b6103bf9190612a67565b9050600060026007600a6103d39190612bcb565b88608001516103e29190612a67565b6103ec9190612d9b565b90506104396103e8846103e887602001516104079190612d9b565b6104119190612a67565b6103e861041e9190612df5565b836104299190612d9b565b6104339190612a67565b8261199f565b84608001818152505061048d6103e8846103e8876060015161045b9190612d9b565b6104659190612a67565b6103e86104729190612df5565b8361047d9190612d9b565b6104879190612a67565b8261199f565b8460a00181815250506000826103e886602001516104ab9190612e29565b6104b59190612f40565b9050600285608001516104c89190612e29565b816104d39190612faa565b8560000181815250506000836103e887606001516104f19190612e29565b6104fb9190612f40565b905060028660a0015161050e9190612e29565b816007600a61051d9190612bcb565b8b6080015161052c9190612a67565b60026105389190612e29565b6105429190612faa565b61054c9190612fed565b86604001818152505061058e8960000151610566896117a7565b6040516020016105769190613057565b6040516020818303038152906040526003600761192f565b8660e001818152505060006002886105a69190612d6a565b146105db578760e001516001886105bd9190612c16565b815181106105ce576105cd61307d565b5b6020026020010151610607565b8760c001516001886105ed9190612c16565b815181106105fe576105fd61307d565b5b60200260200101515b86610100018190525050505050509392505050565b610624611cea565b61066c82600001516040518060400160405280600a81526020017f7072696d61727948756500000000000000000000000000000000000000000000815250600061016861192f565b8160000181815250508160e001516106885780600001516106a7565b61016860f0826000015161069c9190612c16565b6106a69190612d6a565b5b81602001818152505060405180606001604052808260000151815260200160648152602001601e8152508160400181905250604051806060016040528082602001518152602001606481526020016046815250816060018190525060405180606001604052808260000151815260200160648152602001600a81525081608001819052506040518060600160405280610168600a846000015161074a9190612c16565b6107549190612d6a565b815260200160648152602001600a8152508160a0018190525073__$5187c88d6fd7cbb2d86814aea483adb806$__635c1b88f982600001516001856040015161079d9190612c16565b6040518363ffffffff1660e01b81526004016107ba9291906130bb565b600060405180830381865af41580156107d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061080091906131f4565b8160c0018190525073__$5187c88d6fd7cbb2d86814aea483adb806$__635c1b88f98260200151600185604001516108389190612c16565b6040518363ffffffff1660e01b81526004016108559291906130bb565b600060405180830381865af4158015610872573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061089b91906131f4565b8160e00181905250919050565b606060006108b983608001516117a7565b6108c68460a001516117a7565b6108d385608001516117a7565b6108e08660a001516117a7565b6108f960028860e001516108f49190612d9b565b6117a7565b60405160200161090d959493929190613321565b60405160208183030381529060405290508061092c84602001516119b8565b61093985606001516119b8565b61094686602001516119b8565b61095387606001516119b8565b61096c60028960e001516109679190612d9b565b6117a7565b60405160200161098196959493929190613434565b6040516020818303038152906040529050806109a084600001516119b8565b6109ad85604001516119b8565b6109ba86600001516119b8565b6109c787604001516119b8565b6109e060028960e001516109db9190612d9b565b6117a7565b6040516020016109f596959493929190613554565b6040516020818303038152906040529050610a2e600284604001518560000151610a1f9190612fed565b610a299190612f40565b6119b8565b610a56600285606001518660200151610a479190612fed565b610a519190612f40565b6119b8565b610a7e60028660a001518760800151610a6f9190612c16565b610a799190612a67565b6117a7565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588761010001516040518263ffffffff1660e01b8152600401610aba9190613653565b600060405180830381865af4158015610ad7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b009190613714565b84604051602001610b15959493929190613841565b604051602081830303815290604052915050919050565b6060600060405180602001604052806000815250905060005b8460600151811015610ba0576000610b5e86868461159d565b905082610b6a826111cf565b604051602001610b7b9291906138e6565b6040516020818303038152906040529250508080610b989061390a565b915050610b45565b50600060405180602001604052806000815250905060005b8560400151811015610c13576000610bd1878784610248565b905082610bdd826108a8565b604051602001610bee9291906138e6565b6040516020818303038152906040529250508080610c0b9061390a565b915050610bb8565b5060006040518060200160405280600081525090506000866020015163d693a400610c3e9190612a67565b905060005b8760200151811015610cbb5782610c668284610c5f9190612d9b565b6007611a0c565b610c758a608001516007611a0c565b610c848b60a001516007611a0c565b604051602001610c979493929190613a10565b60405160208183030381529060405292508080610cb39061390a565b915050610c43565b506000610ccd88608001516007611a0c565b610cdc8960a001516007611a0c565b610cf760028b60800151610cf09190612d9b565b6007611a0c565b610d0160c86117a7565b610d0b60c86117a7565b604051602001610d1f959493929190613b6a565b60405160208183030381529060405290506000610d3d6101f46117a7565b610d486101f46117a7565b610d536101f46117a7565b610d5e6101f46117a7565b610e6873__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588e604001516040518263ffffffff1660e01b8152600401610d9c9190613653565b600060405180830381865af4158015610db9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610de29190613714565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588f60a001516040518263ffffffff1660e01b8152600401610e1d9190613653565b600060405180830381865af4158015610e3a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e639190613714565b611a76565b86610e7360c86117a7565b610e89600260c8610e849190612d9b565b6117a7565b610e9f600260c8610e9a9190612d9b565b6117a7565b604051602001610eb799989796959493929190613dcf565b6040516020818303038152906040529050808960c00151610f585773__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588a604001516040518263ffffffff1660e01b8152600401610f0d9190613653565b600060405180830381865af4158015610f2a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f539190613714565b610f8f565b6040518060400160405280600e81526020017f75726c28236772616469656e74290000000000000000000000000000000000008152505b8787604051602001610fa49493929190613f28565b604051602081830303815290604052905080610fc16101f46117a7565b610fcc6101f46117a7565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588c608001516040518263ffffffff1660e01b81526004016110079190613653565b600060405180830381865af4158015611024573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061104d9190613714565b61108b6007600a61105e9190612bcb565b8e6080015161106d9190612a67565b60026101f461107c9190612a67565b6110869190612df5565b6117a7565b60405160200161109f959493929190614042565b6040516020818303038152906040529050806110ef6007600a6110c29190612bcb565b8b60a001516110d19190612a67565b60026101f46110e09190612a67565b6110ea9190612df5565b6117a7565b6110fe8b608001516007611a0c565b61110d8c60a001516007611a0c565b61111760c86117a7565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588e604001516040518263ffffffff1660e01b81526004016111529190613653565b600060405180830381865af415801561116f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111989190613714565b896040516020016111af9796959493929190614155565b604051602081830303815290604052905080965050505050505092915050565b606060006111e083606001516117a7565b6111ed84606001516117a7565b6111fa85608001516117a7565b60405160200161120c9392919061434b565b604051602081830303815290604052905061122a83606001516117a7565b61123784600001516117a7565b61124485602001516117a7565b73__$5187c88d6fd7cbb2d86814aea483adb806$__636e6472588760a001516040518263ffffffff1660e01b815260040161127f9190613653565b600060405180830381865af415801561129c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112c59190613714565b846040516020016112da959493929190614400565b604051602081830303815290604052915050919050565b606060006112fe83611326565b9050600061130b8261061c565b905060006113198383610b2c565b9050809350505050919050565b61132e611d47565b8181600001818152505061137b826040518060400160405280600b81526020017f72657065746974696f6e730000000000000000000000000000000000000000008152506003601461192f565b8160200181815250506113c7826040518060400160405280601281526020017f6e756d496e7369646541727469666163747300000000000000000000000000008152506003600a61192f565b816040018181525050611413826040518060400160405280601381526020017f6e756d4f757473696465417274696661637473000000000000000000000000008152506001600461192f565b8160600181815250506005611461836040518060400160405280600b81526020017f6861734772616469656e740000000000000000000000000000000000000000008152506001600a61192f565b148160c001901515908115158152505060086114b6836040518060400160405280600e81526020017f7365636f6e64617279436f6c6f720000000000000000000000000000000000008152506001600861192f565b148160e0019015159081151581525050600060b4672b992ddfa23249d6600284602001516101686114e79190612a67565b60b46114f39190612df5565b6114fd9190612a67565b6115079190612d9b565b6115119190612a67565b9050600760126115219190612df5565b600a61152d9190612bcb565b61153682611aa2565b60c86115429190612e29565b61154c9190612f40565b826080018181525050600760126115639190612df5565b600a61156f9190612bcb565b61157882611acf565b60c86115849190612e29565b61158e9190612f40565b8260a001818152505050919050565b6115a5611d90565b61162084600001516115b6846117a7565b6040516020016115c691906144cb565b60405160208183030381529060405260026007600a6115e59190612bcb565b8860a001516115f49190612a67565b6115fe9190612a67565b6007600a61160c9190612bcb565b8860a0015161161b9190612a67565b61192f565b8160000181815250506116a4846000015161163a846117a7565b60405160200161164a9190614517565b6040516020818303038152906040526007600a6116679190612bcb565b8760a001516116769190612a67565b600860c86116849190612a67565b60028960a001516116959190612d9b565b61169f9190612c16565b61192f565b81602001818152505060008160400181815250506007600a6116c69190612bcb565b8460a001516116d59190612a67565b81606001818152505061171784600001516116ef846117a7565b6040516020016116ff9190614563565b6040516020818303038152906040526005600a61192f565b816080018181525050600060028361172f9190612d6a565b14611759578260e0015160008151811061174c5761174b61307d565b5b602002602001015161177a565b8260c001516000815181106117715761177061307d565b5b60200260200101515b8160a001819052509392505050565b611791611d47565b600061179c83611326565b905080915050919050565b6060600082036117ee576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061192a565b600082905060005b600082146118205780806118099061390a565b915050600a826118199190612a67565b91506117f6565b60008167ffffffffffffffff81111561183c5761183b611e17565b5b6040519080825280601f01601f19166020018201604052801561186e5781602001600182028036833780820191505090505b50905060008290505b600086146119225760018161188c9190612df5565b90506000600a808861189e9190612a67565b6118a89190612d9b565b876118b39190612df5565b60306118bf9190614596565b905060008160f81b9050808484815181106118dd576118dc61307d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886119199190612a67565b97505050611877565b819450505050505b919050565b6000806119648561193f886117a7565b6040516020016119509291906138e6565b604051602081830303815290604052611c65565b905083600185856119759190612df5565b61197f9190612c16565b8261198a9190612d6a565b6119949190612c16565b915050949350505050565b60008183106119ae57816119b0565b825b905092915050565b606060008212156119fb576119d5826119d0906145cb565b6117a7565b6040516020016119e59190614639565b6040516020818303038152906040529050611a07565b611a04826117a7565b90505b919050565b6060611a2e82600a611a1e9190612bcb565b84611a299190612a67565b6117a7565b611a4e83600a611a3e9190612bcb565b85611a499190612d6a565b6117a7565b604051602001611a5f929190614685565b604051602081830303815290604052905092915050565b60608282604051602001611a8b929190614776565b604051602081830303815290604052905092915050565b6000611ac86002672b992ddfa23249d681611ac057611abf612a09565b5b048301611acf565b9050919050565b6000672b992ddfa23249d6600202672b992ddfa23249d66002028381611af857611af7612a09565b5b06634000000063ffffffff160281611b1357611b12612a09565b5b0491506000600160106001901b0360106008601c030384901c1690506000600160086001901b036008601c0385901c169050600080631000000063ffffffff168616149050600080632000000063ffffffff1687161415905081611b7c57826001610100030392505b6000604051806104400160405280610404815260200161480c610404913990506000600460ff1660028601029050600081830151905060006001600460080260ff166001901b03600460080260ff1683901c16905060006001600460080260ff166001901b0383169050600060108a84840302901c9050600088611c0257818303611c06565b8184015b90508715611c34577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810290505b637fffffff670de0b6b3a7640000820281611c5257611c51612a09565b5b059b505050505050505050505050919050565b600081604051602001611c7891906147f4565b6040516020818303038152906040528051906020012060001c9050919050565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611ce4611dcc565b81525090565b6040518061010001604052806000815260200160008152602001611d0c611dcc565b8152602001611d19611dcc565b8152602001611d26611dcc565b8152602001611d33611dcc565b815260200160608152602001606081525090565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001611dc6611dcc565b81525090565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e4f82611e06565b810181811067ffffffffffffffff82111715611e6e57611e6d611e17565b5b80604052505050565b6000611e81611ded565b9050611e8d8282611e46565b919050565b600080fd5b6000819050919050565b611eaa81611e97565b8114611eb557600080fd5b50565b600081359050611ec781611ea1565b92915050565b60008115159050919050565b611ee281611ecd565b8114611eed57600080fd5b50565b600081359050611eff81611ed9565b92915050565b60006101008284031215611f1c57611f1b611e01565b5b611f27610100611e77565b90506000611f3784828501611eb8565b6000830152506020611f4b84828501611eb8565b6020830152506040611f5f84828501611eb8565b6040830152506060611f7384828501611eb8565b6060830152506080611f8784828501611eb8565b60808301525060a0611f9b84828501611eb8565b60a08301525060c0611faf84828501611ef0565b60c08301525060e0611fc384828501611ef0565b60e08301525092915050565b600060608284031215611fe557611fe4611e01565b5b611fef6060611e77565b90506000611fff84828501611eb8565b600083015250602061201384828501611eb8565b602083015250604061202784828501611eb8565b60408301525092915050565b600080fd5b600067ffffffffffffffff82111561205357612052611e17565b5b602082029050602081019050919050565b600080fd5b600061207c61207784612038565b611e77565b9050808382526020820190506060840283018581111561209f5761209e612064565b5b835b818110156120c857806120b48882611fcf565b8452602084019350506060810190506120a1565b5050509392505050565b600082601f8301126120e7576120e6612033565b5b81356120f7848260208601612069565b91505092915050565b6000610200828403121561211757612116611e01565b5b612122610100611e77565b9050600061213284828501611eb8565b600083015250602061214684828501611eb8565b602083015250604061215a84828501611fcf565b60408301525060a061216e84828501611fcf565b60608301525061010061218384828501611fcf565b60808301525061016061219884828501611fcf565b60a0830152506101c082013567ffffffffffffffff8111156121bd576121bc611e92565b5b6121c9848285016120d2565b60c0830152506101e082013567ffffffffffffffff8111156121ee576121ed611e92565b5b6121fa848285016120d2565b60e08301525092915050565b600080600061014084860312156122205761221f611df7565b5b600061222e86828701611f05565b93505061010084013567ffffffffffffffff8111156122505761224f611dfc565b5b61225c86828701612100565b92505061012061226e86828701611eb8565b9150509250925092565b6000819050919050565b61228b81612278565b82525050565b61229a81611e97565b82525050565b6060820160008201516122b66000850182612291565b5060208201516122c96020850182612291565b5060408201516122dc6040850182612291565b50505050565b610160820160008201516122f96000850182612282565b50602082015161230c6020850182612282565b50604082015161231f6040850182612282565b5060608201516123326060850182612282565b5060808201516123456080850182612291565b5060a082015161235860a0850182612291565b5060c082015161236b60c0850182612291565b5060e082015161237e60e0850182612291565b506101008201516123936101008501826122a0565b50505050565b6000610160820190506123af60008301846122e2565b92915050565b600061010082840312156123cc576123cb611df7565b5b60006123da84828501611f05565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061241b83836122a0565b60608301905092915050565b6000602082019050919050565b600061243f826123e3565b61244981856123ee565b9350612454836123ff565b8060005b8381101561248557815161246c888261240f565b975061247783612427565b925050600181019050612458565b5085935050505092915050565b6000610200830160008301516124ab6000860182612291565b5060208301516124be6020860182612291565b5060408301516124d160408601826122a0565b5060608301516124e460a08601826122a0565b5060808301516124f86101008601826122a0565b5060a083015161250c6101608601826122a0565b5060c08301518482036101c08601526125258282612434565b91505060e08301518482036101e08601526125408282612434565b9150508091505092915050565b600060208201905081810360008301526125678184612492565b905092915050565b61257881612278565b811461258357600080fd5b50565b6000813590506125958161256f565b92915050565b600061016082840312156125b2576125b1611e01565b5b6125bd610120611e77565b905060006125cd84828501612586565b60008301525060206125e184828501612586565b60208301525060406125f584828501612586565b604083015250606061260984828501612586565b606083015250608061261d84828501611eb8565b60808301525060a061263184828501611eb8565b60a08301525060c061264584828501611eb8565b60c08301525060e061265984828501611eb8565b60e08301525061010061266e84828501611fcf565b6101008301525092915050565b6000610160828403121561269257612691611df7565b5b60006126a08482850161259b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126e35780820151818401526020810190506126c8565b60008484015250505050565b60006126fa826126a9565b61270481856126b4565b93506127148185602086016126c5565b61271d81611e06565b840191505092915050565b6000602082019050818103600083015261274281846126ef565b905092915050565b600080610120838503121561276257612761611df7565b5b600061277085828601611f05565b92505061010083013567ffffffffffffffff81111561279257612791611dfc565b5b61279e85828601612100565b9150509250929050565b600061010082840312156127bf576127be611e01565b5b6127c960c0611e77565b905060006127d984828501611eb8565b60008301525060206127ed84828501611eb8565b602083015250604061280184828501611eb8565b604083015250606061281584828501611eb8565b606083015250608061282984828501611eb8565b60808301525060a061283d84828501611fcf565b60a08301525092915050565b600061010082840312156128605761285f611df7565b5b600061286e848285016127a8565b91505092915050565b60006020828403121561288d5761288c611df7565b5b600061289b84828501611eb8565b91505092915050565b6128ad81611ecd565b82525050565b610100820160008201516128ca6000850182612291565b5060208201516128dd6020850182612291565b5060408201516128f06040850182612291565b5060608201516129036060850182612291565b5060808201516129166080850182612291565b5060a082015161292960a0850182612291565b5060c082015161293c60c08501826128a4565b5060e082015161294f60e08501826128a4565b50505050565b60006101008201905061296b60008301846128b3565b92915050565b610100820160008201516129886000850182612291565b50602082015161299b6020850182612291565b5060408201516129ae6040850182612291565b5060608201516129c16060850182612291565b5060808201516129d46080850182612291565b5060a08201516129e760a08501826122a0565b50505050565b600061010082019050612a036000830184612971565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a7282611e97565b9150612a7d83611e97565b925082612a8d57612a8c612a09565b5b828204905092915050565b60008160011c9050919050565b6000808291508390505b6001851115612aef57808604811115612acb57612aca612a38565b5b6001851615612ada5780820291505b8081029050612ae885612a98565b9450612aaf565b94509492505050565b600082612b085760019050612bc4565b81612b165760009050612bc4565b8160018114612b2c5760028114612b3657612b65565b6001915050612bc4565b60ff841115612b4857612b47612a38565b5b8360020a915084821115612b5f57612b5e612a38565b5b50612bc4565b5060208310610133831016604e8410600b8410161715612b9a5782820a905083811115612b9557612b94612a38565b5b612bc4565b612ba78484846001612aa5565b92509050818404811115612bbe57612bbd612a38565b5b81810290505b9392505050565b6000612bd682611e97565b9150612be183611e97565b9250612c0e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612af8565b905092915050565b6000612c2182611e97565b9150612c2c83611e97565b9250828201905080821115612c4457612c43612a38565b5b92915050565b7f7931000000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b6000612c86826126a9565b612c908185612c70565b9350612ca08185602086016126c5565b80840191505092915050565b6000612cb782612c4a565b600282019150612cc78284612c7b565b915081905092915050565b7f7932000000000000000000000000000000000000000000000000000000000000815250565b6000612d0382612cd2565b600282019150612d138284612c7b565b915081905092915050565b7f616c7465726e6174696e67436c61737300000000000000000000000000000000815250565b6000612d4f82612d1e565b601082019150612d5f8284612c7b565b915081905092915050565b6000612d7582611e97565b9150612d8083611e97565b925082612d9057612d8f612a09565b5b828206905092915050565b6000612da682611e97565b9150612db183611e97565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612dea57612de9612a38565b5b828202905092915050565b6000612e0082611e97565b9150612e0b83611e97565b9250828203905081811115612e2357612e22612a38565b5b92915050565b6000612e3482612278565b9150612e3f83612278565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612e7e57612e7d612a38565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612ebb57612eba612a38565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612ef857612ef7612a38565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612f3557612f34612a38565b5b828202905092915050565b6000612f4b82612278565b9150612f5683612278565b925082612f6657612f65612a09565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615612f9f57612f9e612a38565b5b828205905092915050565b6000612fb582612278565b9150612fc083612278565b9250828203905081811260008412168282136000851215161715612fe757612fe6612a38565b5b92915050565b6000612ff882612278565b915061300383612278565b92508282019050828112156000831216838212600084121516171561302b5761302a612a38565b5b92915050565b7f6475726174696f6e000000000000000000000000000000000000000000000000815250565b600061306282613031565b6008820191506130728284612c7b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6130b581611e97565b82525050565b60006040820190506130d060008301856130ac565b6130dd60208301846130ac565b9392505050565b6000815190506130f381611ea1565b92915050565b60006060828403121561310f5761310e611e01565b5b6131196060611e77565b90506000613129848285016130e4565b600083015250602061313d848285016130e4565b6020830152506040613151848285016130e4565b60408301525092915050565b600061317061316b84612038565b611e77565b9050808382526020820190506060840283018581111561319357613192612064565b5b835b818110156131bc57806131a888826130f9565b845260208401935050606081019050613195565b5050509392505050565b600082601f8301126131db576131da612033565b5b81516131eb84826020860161315d565b91505092915050565b60006020828403121561320a57613209611df7565b5b600082015167ffffffffffffffff81111561322857613227611dfc565b5b613234848285016131c6565b91505092915050565b7f3c616e696d617465206174747269627574654e616d653d2272222076616c756560008201527f733d220000000000000000000000000000000000000000000000000000000000602082015250565b6000613299602383612c70565b91506132a48261323d565b602382019050919050565b7f3b00000000000000000000000000000000000000000000000000000000000000815250565b7f222063616c634d6f64653d226c696e65617222206475723d2200000000000000815250565b7f732220726570656174436f756e743d22696e646566696e697465222f3e000000815250565b600061332c8261328c565b91506133388288612c7b565b9150613343826132af565b6001820191506133538287612c7b565b915061335e826132af565b60018201915061336e8286612c7b565b9150613379826132af565b6001820191506133898285612c7b565b9150613394826132d5565b6019820191506133a48284612c7b565b91506133af826132fb565b601d820191508190509695505050505050565b7f3c616e696d617465206174747269627574654e616d653d226379222076616c7560008201527f65733d2200000000000000000000000000000000000000000000000000000000602082015250565b600061341e602483612c70565b9150613429826133c2565b602482019050919050565b60006134408289612c7b565b915061344b82613411565b91506134578288612c7b565b9150613462826132af565b6001820191506134728287612c7b565b915061347d826132af565b60018201915061348d8286612c7b565b9150613498826132af565b6001820191506134a88285612c7b565b91506134b3826132d5565b6019820191506134c38284612c7b565b91506134ce826132fb565b601d82019150819050979650505050505050565b7f3c616e696d617465206174747269627574654e616d653d226378222076616c7560008201527f65733d2200000000000000000000000000000000000000000000000000000000602082015250565b600061353e602483612c70565b9150613549826134e2565b602482019050919050565b60006135608289612c7b565b915061356b82613531565b91506135778288612c7b565b9150613582826132af565b6001820191506135928287612c7b565b915061359d826132af565b6001820191506135ad8286612c7b565b91506135b8826132af565b6001820191506135c88285612c7b565b91506135d3826132d5565b6019820191506135e38284612c7b565b91506135ee826132fb565b601d82019150819050979650505050505050565b61360b81611e97565b82525050565b6060820160008201516136276000850182613602565b50602082015161363a6020850182613602565b50604082015161364d6040850182613602565b50505050565b60006060820190506136686000830184613611565b92915050565b600080fd5b600067ffffffffffffffff82111561368e5761368d611e17565b5b61369782611e06565b9050602081019050919050565b60006136b76136b284613673565b611e77565b9050828152602081018484840111156136d3576136d261366e565b5b6136de8482856126c5565b509392505050565b600082601f8301126136fb576136fa612033565b5b815161370b8482602086016136a4565b91505092915050565b60006020828403121561372a57613729611df7565b5b600082015167ffffffffffffffff81111561374857613747611dfc565b5b613754848285016136e6565b91505092915050565b7f3c636972636c652063783d220000000000000000000000000000000000000000815250565b7f222063793d220000000000000000000000000000000000000000000000000000815250565b7f2220723d22000000000000000000000000000000000000000000000000000000815250565b7f222066696c6c3d22000000000000000000000000000000000000000000000000815250565b7f223e000000000000000000000000000000000000000000000000000000000000815250565b7f3c2f636972636c653e0000000000000000000000000000000000000000000000815250565b600061384c8261375d565b600c8201915061385c8288612c7b565b915061386782613783565b6006820191506138778287612c7b565b9150613882826137a9565b6005820191506138928286612c7b565b915061389d826137cf565b6008820191506138ad8285612c7b565b91506138b8826137f5565b6002820191506138c88284612c7b565b91506138d38261381b565b6009820191508190509695505050505050565b60006138f28285612c7b565b91506138fe8284612c7b565b91508190509392505050565b600061391582611e97565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361394757613946612a38565b5b600182019050919050565b7f3c75736520687265663d222374696c6522207472616e73666f726d3d22726f7460008201527f6174652800000000000000000000000000000000000000000000000000000000602082015250565b60006139ae602483612c70565b91506139b982613952565b602482019050919050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b7f2922202f3e000000000000000000000000000000000000000000000000000000815250565b6000613a1c8287612c7b565b9150613a27826139a1565b9150613a338286612c7b565b9150613a3e826139c4565b600182019150613a4e8285612c7b565b9150613a59826139c4565b600182019150613a698284612c7b565b9150613a74826139ea565b60058201915081905095945050505050565b7f3c636c6970506174682069643d22636c6970223e000000000000000000000000815250565b7f3c7061746820643d224d302c304c000000000000000000000000000000000000815250565b7f4c00000000000000000000000000000000000000000000000000000000000000815250565b7f2c30410000000000000000000000000000000000000000000000000000000000815250565b7f2c302c302c302c302c305a22202f3e0000000000000000000000000000000000815250565b7f3c2f636c6970506174683e000000000000000000000000000000000000000000815250565b6000613b7582613a86565b601482019150613b8482613aac565b600e82019150613b948288612c7b565b9150613b9f826139c4565b600182019150613baf8287612c7b565b9150613bba82613ad2565b600182019150613bca8286612c7b565b9150613bd582613af8565b600382019150613be58285612c7b565b9150613bf0826139c4565b600182019150613c008284612c7b565b9150613c0b82613b1e565b600f82019150613c1a82613b44565b600b820191508190509695505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f737667222076696577426f783d22302030200000000000000000000000602082015250565b6000613c89603583612c70565b9150613c9482613c2d565b603582019050919050565b7f2000000000000000000000000000000000000000000000000000000000000000815250565b7f222077696474683d220000000000000000000000000000000000000000000000815250565b7f22206865696768743d2200000000000000000000000000000000000000000000815250565b7f223e3c646566733e000000000000000000000000000000000000000000000000815250565b7f3c672069643d2274696c652220636c69702d706174683d2275726c2823636c6960008201527f7029223e00000000000000000000000000000000000000000000000000000000602082015250565b6000613d93602483612c70565b9150613d9e82613d37565b602482019050919050565b7f3c7265637420783d22302220793d222d00000000000000000000000000000000815250565b6000613dda82613c7c565b9150613de6828c612c7b565b9150613df182613c9f565b600182019150613e01828b612c7b565b9150613e0c82613cc5565b600982019150613e1c828a612c7b565b9150613e2782613ceb565b600a82019150613e378289612c7b565b9150613e4282613d11565b600882019150613e528288612c7b565b9150613e5e8287612c7b565b9150613e6982613d86565b9150613e7482613da9565b601082019150613e848286612c7b565b9150613e8f82613cc5565b600982019150613e9f8285612c7b565b9150613eaa82613ceb565b600a82019150613eba8284612c7b565b9150613ec5826137cf565b6008820191508190509a9950505050505050505050565b7f223e3c2f726563743e0000000000000000000000000000000000000000000000815250565b7f3c2f673e00000000000000000000000000000000000000000000000000000000815250565b6000613f348287612c7b565b9150613f408286612c7b565b9150613f4b82613edc565b600982019150613f5b8285612c7b565b9150613f678284612c7b565b9150613f7282613f02565b60048201915081905095945050505050565b7f3c2f646566733e00000000000000000000000000000000000000000000000000815250565b7f3c726563742077696474683d2200000000000000000000000000000000000000815250565b7f3c672069643d226b616c6569646f73636f706554696c6522207472616e73666f60008201527f726d3d227472616e736c61746528000000000000000000000000000000000000602082015250565b600061402c602e83612c70565b915061403782613fd0565b602e82019050919050565b600061404e8288612c7b565b915061405982613f84565b60078201915061406882613faa565b600d820191506140788287612c7b565b915061408382613ceb565b600a820191506140938286612c7b565b915061409e826137cf565b6008820191506140ae8285612c7b565b91506140b982613edc565b6009820191506140c88261401f565b91506140d48284612c7b565b91508190509695505050505050565b7f29223e0000000000000000000000000000000000000000000000000000000000815250565b7f22202f3e00000000000000000000000000000000000000000000000000000000815250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815250565b6000614161828a612c7b565b915061416c826139c4565b60018201915061417c8289612c7b565b9150614187826140e3565b6003820191506141968261375d565b600c820191506141a68288612c7b565b91506141b182613783565b6006820191506141c18287612c7b565b91506141cc826137a9565b6005820191506141dc8286612c7b565b91506141e7826137cf565b6008820191506141f78285612c7b565b915061420282614109565b6004820191506142128284612c7b565b915061421d82613f02565b60048201915061422c8261412f565b60068201915081905098975050505050505050565b7f3c616e696d6174655472616e73666f726d206174747269627574654e616d653d60008201527f227472616e73666f726d2220747970653d22726f74617465222066726f6d3d2260208201527f302030202d000000000000000000000000000000000000000000000000000000604082015250565b60006142c3604583612c70565b91506142ce82614241565b604582019050919050565b7f2220746f3d222d3336302030202d000000000000000000000000000000000000815250565b7f2220626567696e3d22307322206475723d220000000000000000000000000000815250565b7f732220726570656174436f756e743d22696e646566696e69746522202f3e0000815250565b6000614356826142b6565b91506143628286612c7b565b915061436d826142d9565b600e8201915061437d8285612c7b565b9150614388826142ff565b6012820191506143988284612c7b565b91506143a382614325565b601e82019150819050949350505050565b7f3c726563742072783d2233222072793d22332220783d22302220793d222d0000815250565b7f3c2f726563743e00000000000000000000000000000000000000000000000000815250565b600061440b826143b4565b601e8201915061441b8288612c7b565b915061442682613cc5565b6009820191506144368287612c7b565b915061444182613ceb565b600a820191506144518286612c7b565b915061445c826137cf565b60088201915061446c8285612c7b565b9150614477826137f5565b6002820191506144878284612c7b565b9150614492826143da565b6007820191508190509695505050505050565b7f7265637477696474680000000000000000000000000000000000000000000000815250565b60006144d6826144a5565b6009820191506144e68284612c7b565b915081905092915050565b7f7265637468656967687400000000000000000000000000000000000000000000815250565b6000614522826144f1565b600a820191506145328284612c7b565b915081905092915050565b7f726563746475726174696f6e0000000000000000000000000000000000000000815250565b600061456e8261453d565b600c8201915061457e8284612c7b565b915081905092915050565b600060ff82169050919050565b60006145a182614589565b91506145ac83614589565b9250828201905060ff8111156145c5576145c4612a38565b5b92915050565b60006145d682612278565b91507f8000000000000000000000000000000000000000000000000000000000000000820361460857614607612a38565b5b816000039050919050565b7f2d00000000000000000000000000000000000000000000000000000000000000815250565b600061464482614613565b6001820191506146548284612c7b565b915081905092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000815250565b60006146918285612c7b565b915061469c8261465f565b6001820191506146ac8284612c7b565b91508190509392505050565b7f3c6c696e6561724772616469656e742069643d226772616469656e74223e0000815250565b7f3c73746f70206f66667365743d223025222073746f702d636f6c6f723d220000815250565b7f222f3e0000000000000000000000000000000000000000000000000000000000815250565b7f3c73746f70206f66667365743d2231303025222073746f702d636f6c6f723d22815250565b7f3c2f6c696e6561724772616469656e743e000000000000000000000000000000815250565b6000614781826146b8565b601e82019150614790826146de565b601e820191506147a08285612c7b565b91506147ab82614704565b6003820191506147ba8261472a565b6020820191506147ca8284612c7b565b91506147d582614704565b6003820191506147e482614750565b6011820191508190509392505050565b60006148008284612c7b565b91508190509291505056fe0000000000c90f8801921d20025b26d703242abf03ed26e604b6195d057f00350647d97c0710a34507d95b9e08a2009a096a90490a3308bc0afb68050bc3ac350c8bd35e0d53db920e1bc2e40ee387660fab272b1072a0481139f0cf120116d512c8106e138edbb1145576b1151bdf8515e2144416a81305176dd9de183366e818f8b83c19bdcbf31a82a0251b4732ef1c0b826a1ccf8cb31d934fe51e56ca1e1f19f97b1fdcdc1b209f701c2161b39f2223a4c522e541af23a6887e2467775725280c5d25e845b626a8218527679df42826b92828e5714a29a3c4852a61b1012b1f34eb2bdc4e6f2c98fbba2d553afb2e110a622ecc681e2f8752623041c76030fbc54d31b54a5d326e54c73326e2c233def2873496824f354d905636041ad936ba2013376f9e46382493b038d8fe93398cdd323a402dd13af2eeb73ba51e293c56ba703d07c1d53db832a53e680b2c3f1749b73fc5ec974073f21d4121589a41ce1e64427a41d04325c13543d09aec447acd50452456bc45cd358f46756827471cece647c3c22e4869e664490f57ee49b415334a581c9d4afb6c974b9e038f4c3fdff34ce100344d8162c34e2106174ebfe8a44f5e08e24ffb654c5097fc5e5133cc9451ced46e5269126e53028517539b2aef5433027d54ca0a4a556040e255f5a4d2568a34a9571deef957b0d2555842dd5458d40e8c5964649759f3de125a8279995b1035ce5b9d11535c290acc5cb420df5d3e52365dc79d7b5e50015d5ed77c895f5e0db25fe3b38d60686cce60ec382f616f146b61f1003e6271fa6862f201ac637114cc63ef328f646c59bf64e889256563bf9165ddfbd266573cbb66cf811f6746c7d767bd0fbc683257aa68a69e806919e31f698c246b69fd614a6a6d98a36adcc9646b4af2786bb812d06c24295f6c8f351b6cf934fb6d6227f96dca0d146e30e3496e96a99c6efb5f116f5f02b16fc1938470231099708378fe70e2cbc571410804719e2cd171fa394872552c8472af05a67307c3cf735f662573b5ebd0740b53fa745f9dd074b2c8837504d3447555bd4b75a585ce75f42c0a7641af3c768e0ea576d9498877235f2c776c4eda77b417df77fab988784033287884841378c7aba17909a92c794a7c11798a23b079c89f6d7a05eeac7a4210d87a7d055a7ab6cba37aef63237b26cb4e7b5d039d7b920b887bc5e28f7bf8882f7c29fbed7c5a3d4f7c894bdd7cb727237ce3ceb17d0f42177d3980eb7d628ac57d8a5f3f7db0fdf77dd6668e7dfa98a77e1d93e97e3f57fe7e5fe4927e7f39567e9d55fb7eba3a387ed5e5c57ef0585f7f0991c37f2191b37f3857f57f4de4507f62368e7f754e7f7f872bf27f97cebc7fa736b37fb563b27fc255957fce0c3d7fd8878d7fe1c76a7fe9cbbf7ff094777ff621817ffa72d07ffd88597fff62157fffffffa2646970667358221220b399d3aaecf8e9cff82eb7ffbdd25ae3c348cc1e3152f7b78007e5980a66aace64736f6c63430008100033",
  "libraries": {
    "utils": "0x8C7EA5ce359a9FeB86b7D74Cc1c99D8718A4830f",
    "Trigonometry": "0x9F9eE8D726e50C58a0034f54C3985a1F7fd73563"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}